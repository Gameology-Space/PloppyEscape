// Copyright 2022 Niantic, Inc. All Rights Reserved.

using System;
using Niantic.Lightship.Maps.Unity.Core;
using Niantic.Lightship.Maps.Unity.ExtensionMethods;
using UnityEngine;

namespace Niantic.Lightship.Maps.Unity.Builders.BaseTypes
{
    /// <inheritdoc cref="IMeshBuilder" />
    public abstract class MeshBuilder : FeatureBuilderBase, IMeshBuilder
    {
        [Tooltip("An offset that can be used to avoid z-fighting")]
        [SerializeField]
        private float _zOffset;

        /// <inheritdoc />
        public MeshFilter CreateMeshComponents(MapTileObject mapTileObject)
        {
            var meshGameObject = new GameObject { name = $"{BuilderName} Mesh" };
            meshGameObject.transform.SetParent(mapTileObject.transform);
            meshGameObject.transform.localPosition = _zOffset * Vector3.up;
            meshGameObject.transform.localScale = Vector3.one;

            var renderer = meshGameObject.AddComponent<MeshRenderer>();
            renderer.materials = _materials;

            return meshGameObject.AddComponent<MeshFilter>();
        }

        /// <inheritdoc />
        public abstract void Build(IMapTile mapTile, MeshFilter meshFilter);

        /// <inheritdoc />
        public void Release(MeshFilter meshFilter)
        {
            Destroy(meshFilter.mesh);
        }

        /// <summary>
        /// Assigns a generated <see cref="Mesh"/> to a <see cref="MeshFilter"/> for rendering
        /// </summary>
        /// <param name="mesh">The mesh generated by the <see cref="Build"/> method</param>
        /// <param name="meshFilter">The <see cref="MeshFilter"/> created by the
        /// call to the builder's <see cref="CreateMeshComponents"/> method</param>
        protected static void SetMeshForFilter(Mesh mesh, MeshFilter meshFilter)
        {
            bool valid = !mesh.IsReferenceNull();
            meshFilter.gameObject.SetActive(valid);
            meshFilter.sharedMesh = mesh;
        }
    }
}
