<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Niantic.Lightship.Maps</name>
    </assembly>
    <members>
        <member name="T:Niantic.Lightship.Maps.Async.Awaitables.CustomExceptionHandlingAwaitable">
            <summary>
            An awaitable type with customizable exception handling behavior
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.CustomExceptionHandlingAwaitable.GetAwaiter">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.Awaitables.CustomExceptionHandlingAwaiter">
            <summary>
            An awaiter that logs exceptions as errors rather than throwing.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Async.Awaitables.CustomExceptionHandlingAwaiter.IsCompleted">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.CustomExceptionHandlingAwaiter.GetResult">
            <summary>
            Checks if an exception was thrown by this Task, and if so, logs an error
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.CustomExceptionHandlingAwaiter.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.CustomExceptionHandlingAwaiter.System#Runtime#CompilerServices#ICriticalNotifyCompletion#UnsafeOnCompleted(System.Action)">
            <inheritdoc/>
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.Awaitables.IAwaitable`1">
            <summary>
            This interface can be used to implement a custom awaitable type using the awaitable-awaiter
            pattern.  A type implementing this interface can be awaited with the <c>await</c> keyword.
            For more information please refer to the following documents:
            <p>
            <a href="https://devblogs.microsoft.com/pfxteam/await-anything/">await anything; by Stephen Toub</a><br/>
            <a href="https://devblogs.microsoft.com/premier-developer/extending-the-async-methods-in-c/">Extending the async methods in C#</a><br/>
            <a href="https://weblogs.asp.net/dixin/understanding-c-sharp-async-await-2-awaitable-awaiter-pattern">The Awaitable-Awaiter Pattern</a><br/>
            </p>
            </summary>
            <typeparam name="TAwaiter">An awaiter type that implements <see cref="T:Niantic.Lightship.Maps.Async.Awaitables.IAwaiter"/></typeparam>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.IAwaitable`1.GetAwaiter">
            <summary>
            Used internally by async/await to get a type that manages continuations and
            keeps track of any other state that might be relevant to its execution.
            </summary>
            <returns>An awaiter type that implements <see cref="T:Niantic.Lightship.Maps.Async.Awaitables.IAwaiter"/></returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.Awaitables.IAwaitable`2">
            <summary>
            This interface can be used to implement a custom awaitable type using the awaitable-awaiter
            pattern.  A type implementing this interface can be awaited with the <c>await</c> keyword.
            For more information please refer to the following documents:
            <p>
            <a href="https://devblogs.microsoft.com/pfxteam/await-anything/">await anything; by Stephen Toub</a><br/>
            <a href="https://devblogs.microsoft.com/premier-developer/extending-the-async-methods-in-c/">Extending the async methods in C#</a><br/>
            <a href="https://weblogs.asp.net/dixin/understanding-c-sharp-async-await-2-awaitable-awaiter-pattern">The Awaitable-Awaiter Pattern</a><br/>
            </p>
            </summary>
            <typeparam name="TAwaiter">An awaiter type that implements <see cref="T:Niantic.Lightship.Maps.Async.Awaitables.IAwaiter"/></typeparam>
            <typeparam name="TResult">The type returned when the awaiter completes</typeparam>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.IAwaitable`2.GetAwaiter">
            <summary>
            Used internally by async/await to get a type that manages continuations and
            keeps track of any other state that might be relevant to its execution.
            </summary>
            <returns>An awaiter type that implements <see cref="T:Niantic.Lightship.Maps.Async.Awaitables.IAwaiter`1"/></returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.Awaitables.IAwaiter">
            <summary>
            This interface can be used to implement a custom awaiter type using the awaitable-awaiter
            pattern.  A type implementing this interface is responsible for scheduling continuations
            and keeping track of any other state that might be relevant to its execution.
            For more information please refer to the following documents:
            <p>
            <a href="https://devblogs.microsoft.com/pfxteam/await-anything/">await anything; by Stephen Toub</a><br/>
            <a href="https://devblogs.microsoft.com/premier-developer/extending-the-async-methods-in-c/">Extending the async methods in C#</a><br/>
            <a href="https://weblogs.asp.net/dixin/understanding-c-sharp-async-await-2-awaitable-awaiter-pattern">The Awaitable-Awaiter Pattern</a><br/>
            </p>
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Async.Awaitables.IAwaiter.IsCompleted">
            <summary>
            This property, in typical use cases, indicates whether the
            object being awaited has run to completion.  If this value
            is false, the runtime will call <c>IAwaiter.OnCompleted</c>
            or <c>IAwaiter.UnsafeOnCompleted</c> to register a
            continuation that will run when the awaitable completes,
            and if its value is true, the runtime may execute the
            continuation inline.  This can be useful for custom awaitables
            whose continuations need to be executed on the same thread.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.IAwaiter.GetResult">
            <summary>
            Called after an awaiter completes.  This method is
            typically used to perform validation and error checking.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.Awaitables.IAwaiter`1">
            <summary>
            This interface can be used to implement a custom awaiter type using the awaitable-awaiter
            pattern.  A type implementing this interface is responsible for scheduling continuations
            and keeping track of any other state that might be relevant to its execution.
            For more information please refer to the following documents:
            <p>
            <a href="https://devblogs.microsoft.com/pfxteam/await-anything/">await anything; by Stephen Toub</a><br/>
            <a href="https://devblogs.microsoft.com/premier-developer/extending-the-async-methods-in-c/">Extending the async methods in C#</a><br/>
            <a href="https://weblogs.asp.net/dixin/understanding-c-sharp-async-await-2-awaitable-awaiter-pattern">The Awaitable-Awaiter Pattern</a><br/>
            </p>
            </summary>
            <typeparam name="TResult">The type of the value returned when the awaiter completes</typeparam>
        </member>
        <member name="P:Niantic.Lightship.Maps.Async.Awaitables.IAwaiter`1.IsCompleted">
            <summary>
            This property, in typical use cases, indicates whether the
            object being awaited has run to completion.  If this value
            is false, the runtime will call <c>IAwaiter.OnCompleted</c>
            or <c>IAwaiter.UnsafeOnCompleted</c> to register a
            continuation that will run when the awaitable completes,
            and if its value is true, the runtime may execute the
            continuation inline.  This can be useful for custom awaitables
            whose continuations need to be executed on the same thread.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.IAwaiter`1.GetResult">
            <summary>
            Gets the result returned by the completed awaiter.  This method
            may also be used to perform validation and error checking.
            </summary>
            <returns>The value returned when the awaiter completes</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.Awaitables.MainThreadAwaitable">
            <summary>
            An awaitable type whose purpose is to schedule continuations on the main thread
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.MainThreadAwaitable.GetAwaiter">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.Awaitables.MainThreadAwaiter">
            <summary>
            An awaiter type whose purpose is to schedule continuations on the main thread
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Async.Awaitables.MainThreadAwaiter.IsCompleted">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.MainThreadAwaiter.GetResult">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.MainThreadAwaiter.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.MainThreadAwaiter.System#Runtime#CompilerServices#ICriticalNotifyCompletion#UnsafeOnCompleted(System.Action)">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.Awaitables.TaskSchedulerAwaitable">
            <summary>
            An awaitable type whose purpose is to schedule continuations on the ThreadPool
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.TaskSchedulerAwaitable.GetAwaiter">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.Awaitables.TaskSchedulerAwaiter">
            <summary>
            An awaiter type whose purpose is to schedule continuations on the ThreadPool
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Async.Awaitables.TaskSchedulerAwaiter.IsCompleted">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.TaskSchedulerAwaiter.GetResult">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.TaskSchedulerAwaiter.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.TaskSchedulerAwaiter.System#Runtime#CompilerServices#ICriticalNotifyCompletion#UnsafeOnCompleted(System.Action)">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.Awaitables.UnityAsyncOperationAwaiter">
            <summary>
            This awaitable type allows Unity's <see cref="T:UnityEngine.AsyncOperation"/> or any of its derived
            types (such as <see cref="T:UnityEngine.Networking.UnityWebRequestAsyncOperation"/>, for example) to be awaited.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Async.Awaitables.UnityAsyncOperationAwaiter.IsCompleted">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.UnityAsyncOperationAwaiter.OnCompleted(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.UnityAsyncOperationAwaiter.UnsafeOnCompleted(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Awaitables.UnityAsyncOperationAwaiter.GetResult">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.ExtensionMethods.AsyncOperationExtensions">
            <summary>
            Extension methods for Unity's <see cref="T:UnityEngine.AsyncOperation"/> type
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.ExtensionMethods.AsyncOperationExtensions.GetAwaiter(UnityEngine.AsyncOperation)">
            <summary>
            This method allows Unity's <see cref="T:UnityEngine.AsyncOperation"/> or any of its derived types
            (such as <see cref="T:UnityEngine.Networking.UnityWebRequestAsyncOperation"/>, for example) to be awaited.
            </summary>
            <param name="asyncOperation">The instance to be awaited</param>
            <returns>An <see cref="T:Niantic.Lightship.Maps.Async.Awaitables.IAwaiter"/> type that can be awaited</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.ExtensionMethods.TaskExtensions">
            <summary>
            Extension methods for <see cref="T:System.Threading.Tasks.Task"/> and related awaitable types.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.ExtensionMethods.TaskExtensions.FireAndForget(System.Threading.Tasks.Task)">
            <summary>
            Treats a <see cref="T:System.Threading.Tasks.Task"/> as "fire and forget", which means that
            the <see cref="T:System.Threading.Tasks.Task"/> should run to completion but will never have
            any continuations associated with it.
            </summary>
            <param name="task">The Task to treat as fire-and-forget</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.ExtensionMethods.TaskExtensions.FireAndForget(Niantic.Lightship.Maps.Async.Awaitables.CustomExceptionHandlingAwaitable)">
            <summary>
            Treats a <see cref="T:Niantic.Lightship.Maps.Async.Awaitables.CustomExceptionHandlingAwaitable"/> as "fire and
            forget", which means that it should run to completion but will never
            have any continuations associated with it.
            </summary>
            <param name="awaitable">An awaitable to treat as fire-and-forget</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.ExtensionMethods.TaskExtensions.ContinueOnCurrentThread(System.Threading.Tasks.Task)">
            <summary>
            Configures a <see cref="T:System.Threading.Tasks.Task"/>'s continuation to run on the same
            thread and <see cref="T:System.Threading.SynchronizationContext"/>.  This method is meant
            to be a more readable version of <code>Task.ConfigureAwait(true).</code>
            <p>
            Note that this is the default behavior and shouldn't be necessary
            in most cases, although it may be useful to clarify to the reader
            that a given line of code is intentionally executing continuations on
            the same thread (ie, that it's not using ContinueOnAnyThread() or
            ConfigureAwait(false)).</p>
            <p>
            Note, also, that awaiting and continuing on the same thread can lead to
            deadlocks in some cases, and that <see cref="M:Niantic.Lightship.Maps.Async.ExtensionMethods.TaskExtensions.ContinueOnAnyThread(System.Threading.Tasks.Task)"/>
            is generally preferred.</p>
            </summary>
            <param name="task">The Task to configure</param>
            <returns>An instance of a type that can be awaited</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.ExtensionMethods.TaskExtensions.ContinueOnCurrentThread``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Configures a <see cref="T:System.Threading.Tasks.Task"/>'s continuation to run on the same
            thread and <see cref="T:System.Threading.SynchronizationContext"/>.  This method is meant
            to be a more readable version of <code>Task.ConfigureAwait(true).</code>
            <p>
            Note that this is the default behavior and shouldn't be necessary
            in most cases, although it may be useful to clarify to the reader
            that a given line of code is intentionally executing continuations on
            the same thread (ie, that it's not using ContinueOnAnyThread() or
            ConfigureAwait(false)).</p>
            <p>
            Note, also, that awaiting and continuing on the same thread can lead to
            deadlocks in some cases, and that <see cref="M:Niantic.Lightship.Maps.Async.ExtensionMethods.TaskExtensions.ContinueOnAnyThread(System.Threading.Tasks.Task)"/>
            is generally preferred.</p>
            </summary>
            <param name="task">The Task to configure</param>
            <returns>An instance of a type that can be awaited</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.ExtensionMethods.TaskExtensions.ContinueOnAnyThread(System.Threading.Tasks.Task)">
            <summary>
            Configures a <see cref="T:System.Threading.Tasks.Task"/> such that its continuation does not
            necessarily run on the same thread and <see cref="T:System.Threading.SynchronizationContext"/>.
            This method is meant to be a more readable version of
            <code>Task.ConfigureAwait(false)</code>
            <p>
            Note that the runtime may execute continuations inline on the same thread
            in some circumstances, so calling this method does not guarantee that code
            after an await will run on a different thread.</p>
            </summary>
            <param name="task">The Task to configure</param>
            <returns>An instance of a type that can be awaited</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.ExtensionMethods.TaskExtensions.ContinueOnAnyThread``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Configures a <see cref="T:System.Threading.Tasks.Task"/> such that its continuation does not
            necessarily run on the same thread and <see cref="T:System.Threading.SynchronizationContext"/>.
            This method is meant to be a more readable version of
            <code>Task.ConfigureAwait(false)</code>
            <p>
            Note that the runtime may execute continuations inline on the same thread
            in some circumstances, so calling this method does not guarantee that code
            after an await will run on a different thread.</p>
            </summary>
            <param name="task">The Task to configure</param>
            <returns>An instance of a type that can be awaited</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.ExtensionMethods.UnityWebRequestExtensions">
            <summary>
            Extension methods for Unity's <see cref="T:UnityEngine.Networking.UnityWebRequest"/>
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.ExtensionMethods.UnityWebRequestExtensions.IsHttpError(UnityEngine.Networking.UnityWebRequest)">
            <summary>
            Returns true after this UnityWebRequest receives
            an HTTP response code indicating an error.  This
            extension method should be used instead of the
            obsolete <see cref="P:UnityEngine.Networking.UnityWebRequest.isHttpError"/>
            </summary>
            <param name="this">The web request to check</param>
            <returns>True if there was an error</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.ExtensionMethods.UnityWebRequestExtensions.IsNetworkError(UnityEngine.Networking.UnityWebRequest)">
            <summary>
            Returns true after this UnityWebRequest encounters a system
            error.  This extension method should be used instead of the
            obsolete <see cref="P:UnityEngine.Networking.UnityWebRequest.isNetworkError"/>
            </summary>
            <param name="this">The web request to check</param>
            <returns>True if there was an error</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.ExtensionMethods.UnityWebRequestExtensions.IsSuccessful(UnityEngine.Networking.UnityWebRequest)">
            <summary>
            Returns true if the UnityWebRequest completed successfully.
            </summary>
            <param name="this">The web request to check</param>
            <returns>True if the request was successful</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.ExtensionMethods.UnityWebRequestExtensions.SendWebRequestAsync(UnityEngine.Networking.UnityWebRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a web request, with support for cancellation
            </summary>
            <param name="this">The web request to send</param>
            <param name="cancellationToken">Used to cancel the request</param>
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.Internal.IMainThread">
            <summary>
            Represents state captured from the main thread, which can
            be used to schedule work that will execute on that thread.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Async.Internal.IMainThread.SynchronizationContext">
            <summary>
            The main thread's <see cref="P:Niantic.Lightship.Maps.Async.Internal.IMainThread.SynchronizationContext"/>
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Async.Internal.IMainThread.IsCurrentThreadMain">
            <summary>
            Returns true if the caller is running on the main thread
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.Internal.MainThread">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Async.Internal.MainThread.SynchronizationContext">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Async.Internal.MainThread.IsCurrentThreadMain">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Async.Internal.MainThread.Instance">
            <summary>
            Gets a singleton instance of <see cref="T:Niantic.Lightship.Maps.Async.Internal.IMainThread"/>
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.Internal.MainThread.Initialize">
            <summary>
            This method is always run on Unity's main thread, so
            it captures the current synchronization context in
            order to execute on Unity's main thread later on.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.TaskCompletionSourceEx">
            <summary>
            Utility class for working with <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.TaskCompletionSourceEx.CreateAsyncTaskCompletionSource``1">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> with
            <see cref="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously"/>,
            which forces continuations to run asynchronously.
            </summary>
            <typeparam name="TResult">The underlying Task's result type</typeparam>
            <returns>A new <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/></returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Async.ThreadScheduler">
            <summary>
            Utility class that's responsible for scheduling work on a specific thread
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.ThreadScheduler.SwitchToThreadPoolThreadAsync">
            <summary>
            This method can be used to switch to an available ThreadPool thread by
            calling <c>await ThreadScheduler.SwitchToThreadPoolThreadAsync()</c>.
            Code after the await will be continued on that thread from the ThreadPool,
            regardless of which thread the call was made from.
            </summary>
            <returns>An awaitable type that handles thread switching</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Async.ThreadScheduler.SwitchToMainThreadAsync">
            <summary>
            This method can be used to switch to the main thread by calling
            <code>await ThreadScheduler.SwitchToMainThreadAsync()</code>.
            Code after the await will be continued on the main thread,
            regardless of which thread the call was made from.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Collections.DictionaryEx">
            <summary>
            Helper class for <see cref="T:System.Collections.Generic.Dictionary`2"/> and related types
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Collections.DictionaryEx.EmptyDictionary`2">
            <summary>
            Private class that represents an empty <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Collections.DictionaryEx.Empty``2">
            <summary>
            Returns an empty <see cref="T:System.Collections.Generic.Dictionary`2"/> of a given type
            (similar to <c>Enumerable.Empty{T}</c>).  This method returns a
            static instance rather than allocating a new value for each call.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Collections.DisposableDictionary`2">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> whose values are
            <see cref="T:System.IDisposable"/>.  Calling this type's <see cref="M:Niantic.Lightship.Maps.Collections.DisposableDictionary`2.Dispose"/>
            method will dispose each element in the collection, then clear itself.
            </summary>
            <typeparam name="TKey">The key's type</typeparam>
            <typeparam name="TValue">The value's type</typeparam>
        </member>
        <member name="T:Niantic.Lightship.Maps.Collections.DisposableList`1">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> whose values are <see cref="T:System.IDisposable"/>.
            Calling this type's <see cref="M:Niantic.Lightship.Maps.Collections.DisposableList`1.Dispose"/> method will dispose each
            element in the collection, then clear itself.
            </summary>
            <typeparam name="T">The element's type</typeparam>
        </member>
        <member name="T:Niantic.Lightship.Maps.Collections.ListEx">
            <summary>
            Helper class for <see cref="T:System.Collections.Generic.List`1"/> and related types
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Collections.ListEx.EmptyList`1">
            <summary>
            Private class that represents an empty <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Collections.ListEx.Empty``1">
            <summary>
            Returns an empty <see cref="T:System.Collections.Generic.List`1"/> of a given type (similar
            to <c>Enumerable.Empty{T}</c>).  This method returns a static
            instance rather than allocating a new value for each call.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Coordinates.LatLng">
            <summary>
            Latitude and Longitude, location on a globe
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.LatLng.MIN_LONGITUDE_DEGREES">
            <summary>The minimum longitude, in degrees</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.LatLng.MAX_LONGITUDE_DEGREES">
            <summary>The maximum longitude, in degrees</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.LatLng.MIN_LATITUDE_DEGREES">
            <summary>The minimum latitude, in degrees</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.LatLng.MAX_LATITUDE_DEGREES">
            <summary>The maximum latitude, in degrees</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.LatLng.Latitude">
            <summary>
            Latitude, in degrees, from -90 to 90
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.LatLng.Longitude">
            <summary>
            Longitude, in degrees, from -180 to 180
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Coordinates.LatLng.IsValid">
            <summary>
            Returns true if the latitude and longitude are a valid geographic location and the map.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.LatLng.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="latitude">Latitude, in degrees</param>
            <param name="longitude">Longitude, in degrees</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.LatLng.WrapLongitude(System.Double)">
            <summary>
            Wraps a longitude (in degrees) if it's outside of the
            range defined by <see cref="F:Niantic.Lightship.Maps.Coordinates.LatLng.MIN_LONGITUDE_DEGREES"/>
            and <see cref="F:Niantic.Lightship.Maps.Coordinates.LatLng.MAX_LONGITUDE_DEGREES"/>.
            </summary>
            <param name="longitude">The longitude to wrap</param>
            <returns>A longitude wrapped around the globe such that
            it fits within the valid range of longitudes.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.LatLng.ClampLatitude(System.Double)">
            <summary>
            Clamps a latitude (in degrees) to <see cref="F:Niantic.Lightship.Maps.Coordinates.LatLng.MIN_LATITUDE_DEGREES"/> if
            it's less than the minimum value, or to <see cref="F:Niantic.Lightship.Maps.Coordinates.LatLng.MAX_LATITUDE_DEGREES"/>
            if it's greater than the maximum value.
            </summary>
            <param name="latitude">The latitude to clamp</param>
            <returns>A latitude clamped to within the min and max</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.LatLng.ToWebMercator12(System.Double)">
            <summary>
            Converts a location in <see cref="T:Niantic.Lightship.Maps.Coordinates.LatLng"/> coordinates to <see cref="T:Niantic.Lightship.Maps.Coordinates.WebMercator12"/>
            </summary>
            <param name="elevation">Optional elevation parameter</param>
            <returns>The location in <see cref="T:Niantic.Lightship.Maps.Coordinates.WebMercator12"/> coordinates</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Coordinates.MapCoordinates">
             <summary>
             Defines constants for the map coordinate space definition and conversions.
             The map is accessed in three distinct coordinate spaces: map coordinates,
             tile coordinates and geographic coordinates. The definition of the first two
             was largely historical and based upon the hierarchical raster map pyramid
             used for Google Maps.
            
             Map coordinates are 30-bit fixed point coordinates in a Cartesian coordinate
             space and are stored in 32-bit integers. The mapping to geographic
             coordinates is through a Mercator projection. The origin for this coordinate
             system is the upper left corner of the projection. Values are never negative.
            
             The map defined above is subdivided into tiles. All of the tiles cover a
             fixed portion of the map (recall that the map is projected so the area
             covered is not uniform). Tile coordinates consist of two components: the tile
             address and the offset within the tile.
            
             The tile address is basically the map coordinate of the tile in the
             corresponding zoom level divided by the tile size constant (256 for this
             application). Unlike map coordinates, the origin of the tile address space is
             the upper left corner. The tile address is captured by the <see cref="T:Niantic.Lightship.Maps.Coordinates.TileCoord"/>
             object. The zoom levels in tile space start at level 0, which consists of a
             single tile, up to zoom level 22 at the highest resolution. Each higher
             resolution level is two times the resolution of the previous, lower numbered
             level.
            
             The tile offset is logically a fixed point displacement from the tile origin
             (lower left corner). The range of these offsets is [0, 1]. The units form a
             Cartesian coordinate system over the Mercator projected tile.
            
             Geographic coordinates are the latitude and longitude of some geographic
             feature. The mapping from geographic coordinates to map coordinates (as well
             as tile coordinates) is through the Mercator projection. Geographic
             coordinates are typically stored in S2LatLng objects.
             </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.MapCoordinates.ConvertTileToMap(System.Int32,System.Int32)">
            <summary>
            Converts the given tile coordinate to a map coordinate. Since the
            conversion is uniform for all coordinates of a <c>TileCoord</c>,
            only one version is required here.
            </summary>
            <param name="tileZoom">The zoom level in tile space that contains
              the tile coordinate.</param>
            <param name="tileCoord">The tile coordinate.</param>
            <returns>The map coordinate.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.MapCoordinates.ConvertMapToTile(System.Int32,System.Int32)">
            <summary>
            Converts the given map coordinate to a tile coordinate. Since the
            conversion is uniform for all coordinates of a <c>MapCoord</c>,
            only one version is required here.
            </summary>
            <param name="tileZoom">The zoom level in tile space that contains the
              output tile coordinate.</param>
            <param name="mapCoord">The map coordinate value.</param>
            <returns>The tile coordinate.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.MapCoordinates.ConvertMapToTileOffset(System.Int32,System.Int32)">
            <summary>
            Converts the given map coordinate into an offset from a tile coordinate.
            You can recover the original coordinate via <c>map = offset + ConvertTileToMap(tile)</c>.
            </summary>
            <param name="tileZoom"></param>
            <param name="mapCoord"></param>
            <returns></returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Coordinates.Mercator">
            <summary>
            A utility class for coordinate conversion to and from the
            <a href="https://en.wikipedia.org/wiki/Mercator_projection">
            Mercator</a> projection, which represents a location on the
            surface of the Earth.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.Mercator.MIN_LONGITUDE_METERS">
            <summary>
            Returns -180.0 expressed in meters
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.Mercator.MAX_LONGITUDE_METERS">
            <summary>
            Returns +180.0 expressed in meters
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.Mercator.MIN_LATITUDE_METERS">
            <summary>
            Returns MinLatitudeDegrees expressed in meters
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.Mercator.MAX_LATITUDE_METERS">
            <summary>
            Returns kMaxLatitudeDegrees expressed in meters
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.Mercator.MIN_LATITUDE_DEGREES">
            <summary>
            Returns the min latitude supported by the projection, in degrees
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.Mercator.MAX_LATITUDE_DEGREES">
            <summary>
            Returns the max latitude supported by the projection, in degrees
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.Mercator.FromLongitude(System.Double)">
            <summary>
            Converts a longitude in degrees to meters
            </summary>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.Mercator.ToLongitude(System.Double)">
            <summary>
            Converts a longitude in meters to degrees
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.Mercator.FromLatitude(System.Double)">
            <summary>
            Converts a latitude in degrees to meters
            </summary>
            <param name="latitude"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.Mercator.ToLatitude(System.Double)">
            <summary>
            Converts a latitude in meters to degrees
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Coordinates.SphericalMercator">
            <summary>
            A type of <a href="https://en.wikipedia.org/wiki/Web_Mercator_projection">
            Web Mercator</a> projection, which represents a location on the surface of
            the Earth.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.SphericalMercator.MIN_LONGITUDE_METERS">
            <summary>
            Returns -180.0 expressed in meters
            </summary>
            <value></value>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.SphericalMercator.MAX_LONGITUDE_METERS">
            <summary>
            Returns +180.0 expressed in meters
            </summary>
            <value></value>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.SphericalMercator.MIN_LATITUDE_METERS">
            <summary>
            The minimum latitude supported by the projection, in meters
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.SphericalMercator.MAX_LATITUDE_METERS">
            <summary>
            The maximum latitude supported by the projection, in meters
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.SphericalMercator.MIN_LATITUDE_DEGREES">
            <summary>
            The minimum latitude supported by the projection, in degrees.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.SphericalMercator.MAX_LATITUDE_DEGREES">
            <summary>
            Returns the maximum latitude supported by the projection, in degrees.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.SphericalMercator.WrapLongitudeDegrees(System.Double)">
            <summary>
            Wraps a longitude (in degrees) if it's outside of the
            range defined by <see cref="F:Niantic.Lightship.Maps.Coordinates.LatLng.MIN_LONGITUDE_DEGREES"/>
            and <see cref="F:Niantic.Lightship.Maps.Coordinates.LatLng.MAX_LONGITUDE_DEGREES"/>.
            </summary>
            <param name="longitude">The longitude to wrap</param>
            <returns>A longitude wrapped around the globe such that
            it fits within the valid range of longitudes.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.SphericalMercator.ClampLatitudeDegrees(System.Double)">
            <summary>
            Clamps a latitude (in degrees) to <see cref="F:Niantic.Lightship.Maps.Coordinates.SphericalMercator.MIN_LATITUDE_DEGREES"/> if
            it's less than the minimum value, or to <see cref="F:Niantic.Lightship.Maps.Coordinates.SphericalMercator.MAX_LATITUDE_DEGREES"/>
            if it's greater than the maximum value.
            </summary>
            <param name="latitude">The latitude to clamp</param>
            <returns>A latitude clamped to within the min and max</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.SphericalMercator.FromLongitude(System.Double)">
            <summary>
            Converts a longitude in degrees to meters
            </summary>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.SphericalMercator.ToLongitude(System.Double)">
            <summary>
            Converts a longitude in meters to degrees
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.SphericalMercator.FromLatitude(System.Double)">
            <summary>
            Converts a latitude in degrees to meters
            </summary>
            <param name="latitude"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.SphericalMercator.ToLatitude(System.Double)">
            <summary>
            Converts a latitude in meters to degrees
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Coordinates.TileCoord">
             <summary>
             Represents an immutable tile coordinate within a given zoom level. See <see
             cref="T:Niantic.Lightship.Maps.Coordinates.MapCoordinates"/> for the definition of the various coordinate systems used here.
            
             This class can be losslessly converted back and forth from a <c>ulong</c> using <c>
             indexfrom_level_and_map_coordinates</c>, <c>indexfrom_level_and_tile_coordinates</c>, <c>
             from_index</c>, and <c>Index()</c>.
             </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.TileCoord.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <c>TileCoord</c> at the requested zoom level with the provided tile <c>x</c>
            and <c>y</c> coordinates, which must be valid given the specified <c>zoom</c> level.
            </summary>
            <param name="tileZoom"></param>
            <param name="tileX">The tile's x coordinate (longitude).  This coordinate is wrapped if it
            crosses the anti-meridian.</param>
            <param name="tileY">The tile's y coordinate (latitude).  This coordinate is clamped at the
            poles.</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.TileCoord.IndexFromLevelAndMapCoordinates(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a tile index from map coordinates
            </summary>
            <param name="zoom"></param>
            <param name="mapX"></param>
            <param name="mapY"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.TileCoord.IndexFromLevelAndTileCoordinates(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a tile index from tile coordinates
            </summary>
            <param name="zoom"></param>
            <param name="tileX"></param>
            <param name="tileY"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.TileCoord.FromIndex(System.UInt64)">
            <summary>
            Instantiates a <see cref="T:Niantic.Lightship.Maps.Coordinates.TileCoord"/> from a tile index
            </summary>
            <param name="index">The index of the TileCoord to create</param>
            <returns>A TileCoord that matches the input index</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.TileCoord.ToStringFromIndex(System.UInt64)">
            <summary>
            Generates a string containing the zoom level and x and y
            tile coordinates for a maptile with a given tile index.
            </summary>
            <param name="index">The index of the tile</param>
            <returns>A string describing the maptile with a given index</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.TileCoord.TileZoomFromIndex(System.UInt64)">
            <summary>
            Returns the zoom level of the tile from a tile index
            </summary>
            <param name="tileIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.TileCoord.TileXFromIndex(System.UInt64)">
            <summary>
            Returns the X coordinate of the tile from a tile index
            </summary>
            <param name="tileIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.TileCoord.TileYFromIndex(System.UInt64)">
            <summary>
            Returns the Y coordinate of the tile from a tile index
            </summary>
            <param name="tileIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.TileCoord.TileWithCoord(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the TileCoord for the tile that covers the supplied <c>MapCoord</c> at the
            given zoom level.
            </summary>
            <param name="tileZoom">The map zoom level to select the tile.</param>
            <param name="x">The x coordinate in map coordinates (see <code>MapCoord</code>).</param>
            <param name="y">The y coordinate in map coordinates (see <code>MapCoord</code>).</param>
            <returns>The generated tile coordinate.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.TileCoord.TileNearCoord(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the TileCoord at the requested zoom level that is nearest to the supplied map
            coordinate. The zoom will be clamped to the allowed range.
            </summary>
            <param name="tileZoom">The zoom level to select the tile from.</param>
            <param name="x">The x coordinate in the map coordinate system.</param>
            <param name="y">The y coordinate in the map coordinate system.</param>
            <returns>The tile coordinate for the tile nearest to the supplied map coordinate.</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Coordinates.Vector3D">
            <summary>
            A double-precision vector, similar to Unity's <see cref="T:UnityEngine.Vector3"/>
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Coordinates.Vector3D.Magnitude">
            <summary>
            Returns the length of this vector
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Coordinates.Vector3D.MagnitudeSquared">
            <summary>
            Returns the squared length of this vector
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Coordinates.WebMercator">
            <summary>
            A utility class for coordinate conversion to and from the
            <a href="https://en.wikipedia.org/wiki/Web_Mercator_projection">
            Web Mercator</a> projection, which represents a location on the
            surface of the Earth.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.WebMercator.MIN_LATITUDE_DEGREES">
            <summary>
            The minimum latitude supported by the projection, in degrees
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.WebMercator.MAX_LATITUDE_DEGREES">
            <summary>
            The maximum latitude supported by the projection, in degrees
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.WebMercator.MIN_TILE_COORD">
            <summary>
            The minimum tile coordinate at all zoom levels
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.MaxTileCoord(System.Int32)">
            <summary>
            The maximum tile coordinate at a given zoom level
            </summary>
            <param name="zoomLevel"></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.CheckZoomLevel(System.Int32)">
            <summary>
            Asserts that a zoom level is within expected bounds (0 to 32)
            </summary>
            <param name="zoomLevel">The zoom level to check</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.CheckLongitudeCoord(System.Double,System.Int32)">
            <summary>
            Asserts that a longitude is within expected bounds
            </summary>
            <param name="longitude"></param>
            <param name="zoomLevel"></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.CheckLatitudeCoord(System.Double,System.Int32)">
            <summary>
            Asserts that a latitude is within expected bounds
            </summary>
            <param name="latitude"></param>
            <param name="zoomLevel"></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.CheckLongitudeDegrees(System.Double)">
            <summary>
            Asserts that a longitude is within expected bounds
            </summary>
            <param name="longitude"></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.CheckLatitudeDegrees(System.Double)">
            <summary>
            Asserts that a latitude is within expected bounds
            </summary>
            <param name="latitude"></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.WrapLongitudeDegrees(System.Double)">
            <summary>
            Wraps a longitude (in degrees) if it's outside of the
            range defined by <see cref="F:Niantic.Lightship.Maps.Coordinates.LatLng.MIN_LONGITUDE_DEGREES"/>
            and <see cref="F:Niantic.Lightship.Maps.Coordinates.LatLng.MAX_LONGITUDE_DEGREES"/>.
            </summary>
            <param name="longitudeDegrees">The longitude to wrap</param>
            <returns>A longitude wrapped around the globe such that
            it fits within the valid range of longitudes.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.WrapLongitudeCoord(System.Double,System.Int32)">
            <summary>
            Wraps a longitude (in tile coordinates) if it's outside of the
            range defined by <see cref="F:Niantic.Lightship.Maps.Coordinates.WebMercator.MIN_TILE_COORD"/> and the maximum
            tile coordinate value for a given zoom level.
            </summary>
            <param name="longitude">The longitude to wrap</param>
            <param name="zoomLevel">The coordinate's zoom level</param>
            <returns>A longitude wrapped around the globe such that
            it fits within the valid range of longitudes.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.ClampLatitudeDegrees(System.Double)">
            <summary>
            Clamps a latitude (in degrees) to <see cref="F:Niantic.Lightship.Maps.Coordinates.WebMercator.MIN_LATITUDE_DEGREES"/> if
            it's less than the minimum value, or to <see cref="F:Niantic.Lightship.Maps.Coordinates.WebMercator.MAX_LATITUDE_DEGREES"/>
            if it's greater than the maximum value.
            </summary>
            <param name="latitudeDegrees">The latitude to clamp</param>
            <returns>A latitude clamped to within the min and max</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.ClampLatitudeCoord(System.Double,System.Int32)">
            <summary>
            Clamps a latitude (in tile coordinates) to <see cref="F:Niantic.Lightship.Maps.Coordinates.WebMercator.MIN_TILE_COORD"/>
            if it's less than the minimum value, or to <see cref="M:Niantic.Lightship.Maps.Coordinates.WebMercator.MaxTileCoord(System.Int32)"/>
            if it's greater than the maximum value for a given zoom level.
            </summary>
            <param name="latitude">The latitude to clamp</param>
            <param name="zoomLevel">The coordinate's zoom level</param>
            <returns>A latitude clamped to within the min and max</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.FromLongitude(System.Double,System.Int32)">
            <summary>
            Converts a longitude from degrees to tile coordinates
            </summary>
            <param name="longitudeDegrees"></param>
            <param name="zoomLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.ToWrappedLongitude(System.Double,System.Int32)">
            <summary>
            Converts a longitude from tile coordinates to
            degrees, and wraps the value if necessary.
            </summary>
            <param name="longitudeCoord">The longitude to convert</param>
            <param name="zoomLevel">The coordinate's zoom level</param>
            <returns>A longitude wrapped around the globe such that
            it fits within the valid range of longitudes.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.ToLongitude(System.Double,System.Int32)">
            <summary>
            Converts a longitude from tile coordinates to degrees
            </summary>
            <param name="longitudeCoord">The longitude to convert</param>
            <param name="zoomLevel">The coordinate's zoom level</param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.FromLatitude(System.Double,System.Int32)">
            <summary>
            Converts a latitude from degrees to tile coordinates
            </summary>
            <param name="latitudeDegrees">The latitude to convert</param>
            <param name="zoomLevel">The coordinate's zoom level</param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.ToClampedLatitude(System.Double,System.Int32)">
            <summary>
            Converts a latitude from tile coordinates to degrees, and
            clamps the value if necessary
            </summary>
            <param name="latitudeCoord">The latitude to convert</param>
            <param name="zoomLevel">The coordinate's zoom level</param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.ToLatitude(System.Double,System.Int32)">
            <summary>
            Converts a latitude from tile coordinates to degrees
            </summary>
            <param name="latitudeCoord">The latitude to convert</param>
            <param name="zoomLevel">The coordinate's zoom level</param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.TileIndex(System.Double,System.Double)">
            <summary>
            Converts a coordinate in tile space into a tile index.
            </summary>
            <param name="pixels"></param>
            <param name="tileSize"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.ToZoomLevel(System.Double,System.Double)">
            <summary>
            Converts a distance in meters represented by a pixel to a zoom level and back.
            </summary>
            <param name="metersPerPixel"></param>
            <param name="latitude"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator.GetMetersPerUnit(System.Double,System.Double)">
            <summary>
            Returns ratio of meters to web mercator units
            (distances in web mercator are stretched towards the poles)
            </summary>
            <param name="latitude"></param>
            <param name="zoomLevel"></param>
            <returns></returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Coordinates.WebMercator12">
             <summary>
             A class specifying location on the surface of the Earth in Web Mercator
             coordinates, scale level 12:
             https://en.wikipedia.org/wiki/Web_Mercator_projection
            
             East:
             Longitude -180 maps to 0
             Longitude 180 maps to 4095
            
             North:
             Latitude ~ -85 maps to 0
             Longitude ~ 85 maps to 4095
            
             </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.ZOOM_LEVEL">
            <summary>
            The zoom level of a <see cref="T:Niantic.Lightship.Maps.Coordinates.WebMercator12"/> coordinate (which is 12)
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.MIN_TILE_COORD">
            <summary>
            The minimum tile coordinate value
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.MAX_TILE_COORD">
            <summary>
            The maximum tile coordinate value
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.MIN_LATITUDE_DEGREES">
            <summary>
            The minimum latitude supported by the projection, in degrees
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.MAX_LATITUDE_DEGREES">
            <summary>
            The maximum latitude supported by the projection, in degrees
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.East">
            <summary>
            positive going East
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.North">
            <summary>
            positive going North
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.Elevation">
            <summary>
            meters, positive going up
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.#ctor(Niantic.Lightship.Maps.Coordinates.Vector3D@)">
            <summary>
            Create a WebMercator12 coordinate from a Vector3 (of doubles) where
            x -> east
            y -> north
            z -> up
            </summary>
            <param name="vec3"></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.#ctor(UnityEngine.Vector3)">
            <summary>
            Create a WebMercator12 coordinate from a Vector3 (of floats) where
            x -> east
            y -> north
            z -> up
            </summary>
            <param name="vec3"></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a WebMercator12 coordinate from north, east, and elevation
            </summary>
            <param name="east"></param>
            <param name="elevation"></param>
            <param name="north"></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.WrapLongitudeDegrees(System.Double)">
            <summary>
            Wraps a longitude (in degrees) if it's outside of the
            range defined by <see cref="F:Niantic.Lightship.Maps.Coordinates.LatLng.MIN_LONGITUDE_DEGREES"/>
            and <see cref="F:Niantic.Lightship.Maps.Coordinates.LatLng.MAX_LONGITUDE_DEGREES"/>.
            </summary>
            <param name="longitudeDegrees">The longitude to wrap</param>
            <returns>A longitude wrapped around the globe such that
            it fits within the valid range of longitudes.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.ClampLatitudeDegrees(System.Double)">
            <summary>
            Clamps a latitude (in degrees) to <see cref="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.MIN_LATITUDE_DEGREES"/> if
            it's less than the minimum value, or to <see cref="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.MAX_LATITUDE_DEGREES"/>
            if it's greater than the maximum value.
            </summary>
            <param name="latitudeDegrees">The latitude to clamp</param>
            <returns>A latitude clamped to within the min and max</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.WrapLongitudeCoord(System.Double)">
            <summary>
            Wraps a longitude (in tile coordinates) if it's outside of the range
            defined by <see cref="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.MIN_TILE_COORD"/> and <see cref="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.MAX_TILE_COORD"/>.
            </summary>
            <param name="longitudeCoord">The longitude to wrap</param>
            <returns>A longitude wrapped around the globe such that
            it fits within the valid range of longitudes.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.ClampLatitudeCoord(System.Double)">
            <summary>
            Clamps a latitude (in tile coordinates) to <see cref="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.MIN_TILE_COORD"/>
            if it's less than the minimum value, or to <see cref="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.MAX_TILE_COORD"/>
            if it's greater than the maximum value.
            </summary>
            <param name="latitudeCoord">The latitude to clamp</param>
            <returns>A latitude clamped to within the min and max</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.WrapLongitudeCoord(System.Int32)">
            <summary>
            Wraps a longitude (in tile coordinates) if it's outside of the range
            defined by <see cref="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.MIN_TILE_COORD"/> and <see cref="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.MAX_TILE_COORD"/>.
            </summary>
            <param name="longitudeCoord">The longitude to wrap</param>
            <returns>A longitude wrapped around the globe such that
            it fits within the valid range of longitudes.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.ClampLatitudeCoord(System.Int32)">
            <summary>
            Clamps a latitude (in tile coordinates) to <see cref="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.MIN_TILE_COORD"/>
            if it's less than the minimum value, or to <see cref="F:Niantic.Lightship.Maps.Coordinates.WebMercator12.MAX_TILE_COORD"/>
            if it's greater than the maximum value.
            </summary>
            <param name="latitudeCoord">The latitude to clamp</param>
            <returns>A latitude clamped to within the min and max</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.FromLongitude(System.Double)">
            <summary>
            Converts a longitude from degrees to tile coordinates
            </summary>
            <param name="longitudeDegrees"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.FromLatitude(System.Double)">
            <summary>
            Converts a latitude from degrees to tile coordinates
            </summary>
            <param name="latitudeDegrees"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.ToLatitude(System.Double)">
            <summary>
            Converts a latitude from tile coordinates to degrees
            </summary>
            <param name="latitudeCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.ToLongitude(System.Double)">
            <summary>
            Converts a longitude from tile coordinates to degrees
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.GetMetersPerUnit(System.Double)">
            <summary>
            Returns ratio of meters to web mercator 12 units
            (distances in web mercator are stretched towards the poles)
            </summary>
            <param name="latitudeDegrees">Latitude, in degrees</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.ToVector3D">
            <summary>
            Convert to a Vector3D where
            east -> x
            north -> y
            up -> z
            </summary>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Coordinates.WebMercator12.ToLatLng">
            <summary>
            Converts a location in <see cref="T:Niantic.Lightship.Maps.Coordinates.WebMercator12"/> coordinates to <see cref="T:Niantic.Lightship.Maps.Coordinates.LatLng"/>
            </summary>
            <returns>The current location in <see cref="T:Niantic.Lightship.Maps.Coordinates.WebMercator12"/></returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Coordinates.Wgs84Datum">
            <summary>
            Exposes WGS84 Datum parameters. See link below for details:
            https://confluence.qps.nl/pages/viewpage.action?pageId=29855173
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.Wgs84Datum.SEMI_MAJOR_AXIS_METERS">
            <summary>
            The semi major axis in meters.  It's the distance between
            the center of the Earth and the equator in meters.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Coordinates.Wgs84Datum.SEMI_MINOR_AXIS_METERS">
            <summary>
            The semi-minor axis in meters.  It's distance between
            the center of the Earth and the poles in meters.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Exceptions.BundledTileFetchException">
            <summary>
            An exception thrown by <see cref="T:Niantic.Lightship.Maps.Internal.Bundle.BundledTileFetchGroup"/>.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Exceptions.BundleDownloadException">
            <summary>
            An exception thrown when a bundle download fails.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Exceptions.TileDataMissingException">
            <summary>
            An exception thrown when a given maptile could
            not be found in its expected parent bundle.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Exceptions.LightshipMapsSystemException">
            <summary>
            Base class for exceptions thrown from <see cref="T:Niantic.Lightship.Maps.LightshipMapsSystem"/>
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Exceptions.LightshipMapsSystemNotInitializedException">
            <summary>
            This exception is thrown if the <see cref="P:Niantic.Lightship.Maps.LightshipMapsSystem.Instance"/>
            property is accessed before the <see cref="T:Niantic.Lightship.Maps.LightshipMapsSystem"/> singleton
            has been initialized via <see cref="M:Niantic.Lightship.Maps.LightshipMapsSystem.Initialize(System.String,System.String,System.String,System.String,System.Version,Niantic.Lightship.Maps.ITileStreamServiceImpl,Niantic.Lightship.Maps.IMapViewManager)"/>.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Exceptions.MaptileException">
            <summary>
            The base class for all exceptions defined in this library
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Exceptions.SettingsServiceException">
            <summary>
            Base class for exceptions thrown from the settings service
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Exceptions.InvalidLightshipApiKeyException">
            <summary>
            Exception thrown if a Lightship API key is invalid
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Extensions.DictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Gets a value from a <see cref="T:System.Collections.Generic.Dictionary`2"/> if a
            given key is present, otherwise a default value is returned.
            </summary>
            <param name="dictionary">The dictionary to check</param>
            <param name="key">The key to look for</param>
            <param name="defaultValue">The value returned if the key doesn't exist</param>
            <typeparam name="TKey">The dictionary's generic key type</typeparam>
            <typeparam name="TValue">The dictionary's generic value type</typeparam>
            <returns>The dictionary's value for the specified key
            if it exists, or a default value if not</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
            Gets a value from a <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>
            if a given key is present, otherwise a default value is returned.
            </summary>
            <param name="dictionary">The dictionary to check</param>
            <param name="key">The key to look for</param>
            <param name="defaultValue">The value returned if the key doesn't exist</param>
            <typeparam name="TKey">The dictionary's generic key type</typeparam>
            <typeparam name="TValue">The dictionary's generic value type</typeparam>
            <returns>The dictionary's value for the specified key
            if it exists, or a default value if not</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.DictionaryExtensions.EmptyIfNull``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Returns an empty <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>
            if a given <see cref="T:System.Collections.Generic.Dictionary`2"/> is null
            </summary>
            <param name="value">The Dictionary to check</param>
            <typeparam name="T">The Dictionary's generic key type</typeparam>
            <typeparam name="TU">The Dictionary's generic value type</typeparam>
            <returns>The Dictionary being checked is returned if it is not null, otherwise
            an empty <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> is returned instead.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.DictionaryExtensions.GetAndRemoveValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Extension method that gets an element and removes it from a
            <see cref="T:System.Collections.Generic.Dictionary`2"/> if it exists, and returns either the removed value or
            a default.
            </summary>
            <param name="this"></param>
            <param name="key">The Dictionary's key</param>
            <param name="defaultValue">Optional parameter specifying the value to be returned if the
            given key is not present.  If this value is not passed in, the type's default value is
            returned.</param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns>The value removed from the Dictionary if the given key exists, or a default value
            if it doesn't.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.DictionaryExtensions.IsEmpty``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Checks whether an <see cref="T:System.Collections.Generic.IDictionary`2"/> is empty
            </summary>
            <param name="dictionary">The Dictionary to check</param>
            <typeparam name="TKey">The Dictionary's key type</typeparam>
            <typeparam name="TValue">The Dictionary's value type</typeparam>
            <returns>True if the Dictionary is empty</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.DictionaryExtensions.IsNotEmpty``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Checks whether an <see cref="T:System.Collections.Generic.IDictionary`2"/> contains any elements
            </summary>
            <param name="dictionary">The Dictionary to check</param>
            <typeparam name="TKey">The Dictionary's key type</typeparam>
            <typeparam name="TValue">The Dictionary's value type</typeparam>
            <returns>True if there are any elements in the Dictionary</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Extensions.EnumerableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Extensions.ListExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.ListExtensions.IsEmpty``1(System.Collections.Generic.List{``0})">
            <summary>
            Checks whether or not a <see cref="T:System.Collections.Generic.List`1"/> is empty
            </summary>
            <param name="value">The List to check</param>
            <typeparam name="T">The List's generic type</typeparam>
            <returns>True if the List is empty</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.ListExtensions.EmptyIfNull``1(System.Collections.Generic.List{``0})">
            <summary>
            Returns an empty <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>
            if a given <see cref="T:System.Collections.Generic.List`1"/> is null
            </summary>
            <param name="value">The List to check</param>
            <typeparam name="T">The List's generic type</typeparam>
            <returns>The List being checked is returned if it is not null, otherwise
            an empty <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> is returned instead.</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Extensions.NetworkResponseExtensions">
            <summary>
            Extension methods for <see cref="T:Niantic.Lightship.Maps.Network.NetworkResponse"/>
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.NetworkResponseExtensions.GetResultDescription(Niantic.Lightship.Maps.Network.NetworkResponse)">
            <summary>
            Gets a description string from a <see cref="T:Niantic.Lightship.Maps.Network.NetworkResponse"/>, for logging purposes
            </summary>
            <param name="response">The response object</param>
            <returns>A human-readable description string</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Extensions.QueueExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.Queue`1"/>
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Extensions.ReaderWriterLockExtensions">
            <summary>
            Extension methods for <see cref="T:System.Threading.ReaderWriterLock"/>
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.ReaderWriterLockExtensions.ScopedReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Enters a read lock for a given scoped critical section, then releases
            the lock when the critical section is exited.  This method returns an
            <see cref="T:System.IDisposable"/> that should be put into a using statement
            that wraps the critical section being locked.
            </summary>
            <param name="lock">The <see cref="T:System.Threading.ReaderWriterLockSlim"/> to lock</param>
            <returns>An <see cref="T:System.IDisposable"/> that releases the lock when disposed.
            </returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.ReaderWriterLockExtensions.ScopedWriteLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Enters a write lock for a given scoped critical section, then releases
            the lock when the critical section is exited.  This method returns an
            <see cref="T:System.IDisposable"/> that should be put into a using statement
            that wraps the critical section being locked.
            </summary>
            <param name="lock">The <see cref="T:System.Threading.ReaderWriterLockSlim"/> to lock</param>
            <returns>An <see cref="T:System.IDisposable"/> that releases the lock when disposed.
            </returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Extensions.ReadOnlyCollectionEx">
            <summary>
            Helper class for <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> and related types
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Extensions.ReadOnlyCollectionEx.EmptyReadOnlyCollection`1">
            <summary>
            Private class that represents an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.ReadOnlyCollectionEx.Empty``1">
            <summary>
            Returns an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of a given
            type (similar to <c>Enumerable.Empty{T}</c>).  This method returns
            a static instance rather than allocating a new value for each call.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.ReadOnlyCollectionEx.Create``1(``0[])">
            <summary>
            Instantiates a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>
            containing the values passed in as parameters.
            </summary>
            <param name="values">The elements the new collection will contain</param>
        </member>
        <member name="T:Niantic.Lightship.Maps.Extensions.StringExtensions">
            <summary>
            Extension methods for <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.StringExtensions.IsEmpty(System.String)">
            <summary>
            Returns true if the string is empty
            </summary>
            <param name="value">The string to check</param>
            <returns>True if the string is empty</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.StringExtensions.NullIfEmpty(System.String)">
            <summary>
            Returns null if the string is empty
            </summary>
            <param name="value">The string to check</param>
            <returns>Returns null if the string is empty,
            otherwise the input string is returned</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Extensions.StringExtensions.NullIfEmptyOrWhitespace(System.String)">
            <summary>
            Returns null if the string is empty or whitespace
            </summary>
            <param name="value">The string to check</param>
            <returns>Returns null if the string is empty or
            whitespace, otherwise the input string is returned</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Features.IAreaFeature">
            <summary>
            <c>AreaFeature</c> is a map tile feature that
            describes a two-dimensional area like a park.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.IAreaFeature.Points">
            <summary>
            All points in this mesh in no specific order.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.IAreaFeature.Indices">
            <summary>
            An array of stride three representing triangles.
            Each entry is an index into the Points array.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.IAreaFeature.ExteriorEdges">
            <summary>
            An array of <see cref="T:Niantic.Lightship.Maps.Geometry.LineSegment"/>s that define the area's border.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Features.AreaFeature">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.AreaFeature.Kind">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.AreaFeature.Layer">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.AreaFeature.Label">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.AreaFeature.Points">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.AreaFeature.Indices">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.AreaFeature.ExteriorEdges">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Features.IBuildingFeature">
             <summary>
             <c>BuildingFeature</c> is a map tile feature that
             represents a building or part of a building.
            
             <param>
             Complex buildings are implemented as a layer-cake
             where each section has a 2-dimensional cross-section,
             a base height, and a top height.
             </param>
             </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.IBuildingFeature.Points">
            <summary>
            All points in this mesh in no specific
            order. All points have the same Y coordinate.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.IBuildingFeature.Indices">
            <summary>
            An array of stride three representing triangles.
            Each entry is an index into the Points array.
            All triangles here are parallel to the x-z axis.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.IBuildingFeature.ExteriorEdges">
            <summary>
            An array of <see cref="T:Niantic.Lightship.Maps.Geometry.LineSegment"/>s that represent
            a building's exterior edges.  These line segments are
            typically used to extrude quads for the building's walls.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.IBuildingFeature.Height">
            <summary>
            The height of this section of the building.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.IBuildingFeature.IsUnderground">
            <summary>
            Flag for if the building is underground
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Features.BuildingFeature">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.BuildingFeature.Kind">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.BuildingFeature.Layer">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.BuildingFeature.Label">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.BuildingFeature.Points">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.BuildingFeature.Indices">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.BuildingFeature.ExteriorEdges">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.BuildingFeature.Height">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.BuildingFeature.IsUnderground">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Features.IMapTileFeature">
             <summary>
             <c>IMapTileFeature</c> is the interface representing a single map feature.
            
             Concrete types implement various types of map features.
            
             Map features are clipped if they cross tile boundaries so this will
             only contain the part of the map feature that is on this tile.
             </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Features.ILabelInfo">
            <summary>
            Information related to a label that's associated
            with a particular <see cref="T:Niantic.Lightship.Maps.Features.IMapTileFeature"/>.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.ILabelInfo.Priority">
            <summary>
            A numeric priority (ranking).  When multiple labels overlap in
            screen space, the label with the highest numeric priority should
            be preferred.  This is generally a measure of 'importance', though
            initially this will just be based on Tilezen’s population_rank.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.ILabelInfo.MinZoom">
            <summary>
            Min zoom at which the label should be displayed.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.ILabelInfo.MaxZoom">
            <summary>
            Max zoom at which the label should be displayed.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.ILabelInfo.PosX">
            <summary>
            X Position in the tile to display the label.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.ILabelInfo.PosY">
            <summary>
            Y Position in the tile to display the label.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.ILabelInfo.Text">
            <summary>
            The text to render in-game.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Features.LabelInfo">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.LabelInfo.Priority">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.LabelInfo.MinZoom">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.LabelInfo.MaxZoom">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.LabelInfo.PosX">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.LabelInfo.PosY">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.LabelInfo.Text">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Features.ILinearFeature">
            <summary>
            <c>LinearFeature</c> is a maptile feature that represents one or more polylines.
            <para>
            Each polyline may contain 1 or more segments and may or may not be a closed loop.
            </para>
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.ILinearFeature.Points">
             <summary>
             The ordered array of points.
            
             There may be multiple line strips in this feature, the boundaries of which are
             determined by looking at LineStrip lengths.
             </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.ILinearFeature.LineStrips">
             <summary>
             The number of points in each line strip.
            
             Each entry in this array represents a different line strip, and its length
             determines the number of points to pull from the Points array. For instance,
             if this array was [5, 2, 8], then Points[0..4] is the first line strip,
             Points[5..6] is the second line strip, and Points[7..14] is the third line strip.
             </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Features.LinearFeature">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.LinearFeature.Kind">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.LinearFeature.Layer">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.LinearFeature.Label">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.LinearFeature.Points">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.LinearFeature.LineStrips">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Features.IPointFeature">
            <summary>
            <c>PointFeature</c> is a map tile feature that represents a cloud of points.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.IPointFeature.Points">
            <summary>
            All points in this feature.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Features.PointFeature">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.PointFeature.Kind">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.PointFeature.Layer">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.PointFeature.Label">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Features.PointFeature.Points">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Geometry.LineSegment">
            <summary>
            A line segment defined by two <see cref="T:UnityEngine.Vector3"/> points
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Geometry.LineSegment.VertexA">
            <summary>
            An endpoint of the line segment
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Geometry.LineSegment.VertexB">
            <summary>
            An endpoint of the line segment
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.IMapTile">
             <summary>
             <c>MapTile</c> contains the features requested to render a single map tile.
            
             <para>
             The coordinates of the map features are normalized to 1 within the tile.
             </para>
             <para>
             The geometry is clipped on tile boundaries.
             </para>
             </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.IMapTile.Id">
            <summary>
            A unique ID representing the tile.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.IMapTile.Origin">
            <summary>
            The origin of the tile in map units.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.IMapTile.Size">
            <summary>
            The size of the map tile in map units.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.IMapTile.Level">
            <summary>
            The map zoom level that the tile is coming from.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.IMapTile.TileCoordinateString">
            <summary>
            A string containing the maptile's zoom level and coordinates,
            for display and debugging purposes.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.IMapTile.GetTileDataOfType``1(Niantic.Lightship.Maps.Proto.LayerKind)">
            <summary>
            Returns all of this tile's <see cref="T:Niantic.Lightship.Maps.Features.IMapTileFeature"/>s of
            a given type in the specified layer.  NOTE: This method does
            a small amount of memory allocation when it's called. Please
            consider using <see cref="M:Niantic.Lightship.Maps.IMapTile.GetTileData(Niantic.Lightship.Maps.Proto.LayerKind)"/> instead.
            </summary>
            <param name="layer">The layer containing features to return</param>
            <typeparam name="T">The concrete feature type to return</typeparam>
            <returns>An IEnumerable of features of the specified type</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.IMapTile.GetTileDataOfType``1(Niantic.Lightship.Maps.Proto.LayerKind,Niantic.Lightship.Maps.Proto.FeatureKind)">
            <summary>
            Returns all of this tile's <see cref="T:Niantic.Lightship.Maps.Features.IMapTileFeature"/>s of
            a given type and <see cref="T:Niantic.Lightship.Maps.Proto.FeatureKind"/> in the specified
            layer.  NOTE: This method does a small amount of memory
            allocation when it's called. Please consider using
            <see cref="M:Niantic.Lightship.Maps.IMapTile.GetTileData(Niantic.Lightship.Maps.Proto.LayerKind,Niantic.Lightship.Maps.Proto.FeatureKind)"/> instead.
            </summary>
            <param name="layer">The later containing features to return</param>
            <param name="featureKind">The feature kind to return</param>
            <typeparam name="T">The concrete feature type to return</typeparam>
            <returns>An IEnumerable of features of the specified type</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.IMapTile.GetTileData(Niantic.Lightship.Maps.Proto.LayerKind)">
            <summary>
            Returns all of this tile's <see cref="T:Niantic.Lightship.Maps.Features.IMapTileFeature"/>s in the specified layer.
            </summary>
            <param name="layer">The later containing features to return</param>
            <returns>A List of features in the specified layer</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.IMapTile.GetTileData(Niantic.Lightship.Maps.Proto.LayerKind,Niantic.Lightship.Maps.Proto.FeatureKind)">
            <summary>
            Returns all of this tile's <see cref="T:Niantic.Lightship.Maps.Features.IMapTileFeature"/>s of
            a given <see cref="T:Niantic.Lightship.Maps.Proto.FeatureKind"/> in the specified layer.
            </summary>
            <param name="layer">The later containing features to return</param>
            <param name="featureKind">The feature kind to return</param>
            <returns>A List of features of a given kind in the specified layer</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.IMapViewManager">
             <summary>
             <c>IMapViewManager</c> provides a collection of APIs to manage view point
             locations on the map.
             <para>
             The map view manager can handle one of more view point locations.
             For each view point location, Ditto will determine what data to stream and
             cache.
             <c>MainViewId</c> is reserved for the default map view.
             The other views can be added and removed as needed.
             </para>
             </summary>
             <example>
             This sample shows how to use the call into MapViewManager to track ViewPoints.
             <code>
             public class MapViewHandler : MonoBehaviour {
            
               private IViewManager viewManager;
            
               void Start() {
                 GameEventHandler.SetGameEntityManager(
                     new GameEntityManager(this.EntityParser).
                         ListenTo{MyGameSpecificDataProto}(MyGameSpecificDataProtoListener));
               }
            
               void Update() {
                 // In this example, we will say that we want to treat the player's view as the main view,
                 // and want it updated ever frame in Update.
                 ViewPoint mainView = GetPlayerViewFromSomewhereElseInC#();
                 viewManager.SetView(viewManager.MainViewId, ref mainView);
               }
            
               int AddRemoteView(ViewPoint view) {
                 int newId = viewManager.AddView(ref view);
                 if (newId == viewManager.InvalidViewId) { // The add failed in this case! Write a log.
                   log.Warning("Add View Failed! Could it be that viewManager.GetViewCount() equals viewManager.GetMaxViews()???");
               }
            
               ViewPoint GetView(int id) {
                 return viewManager.GetView(id); // Will fail if provided an id that does not exist.
               }
            
               boolean RemoveView(int id) {
                 int startCount = viewManager.GetViewCount();
                 viewManager.RemoveView(id);
                 int endCount = viewManager.GetViewCount();
                 if (startCount == endCount) { // Since RemoveView fails silently, see if the view count changed to detect failures.
                   log.Warning("RemoveView failed, perhaps ID does not exist?");
                   return false;
                 }
                 return true;
               }
               }
             </code>
             </example>
        </member>
        <member name="P:Niantic.Lightship.Maps.IMapViewManager.MainViewId">
            <summary>
            ID reserved for the main view.
            </summary>
            <value>The main view id.</value>
        </member>
        <member name="P:Niantic.Lightship.Maps.IMapViewManager.InvalidViewId">
            <summary>
            ID reserved for invalid viewpoints.
            </summary>
            <value>The invalid view id.</value>
        </member>
        <member name="P:Niantic.Lightship.Maps.IMapViewManager.MaxViews">
            <summary>
            Maximum number of view points allowed by the platform.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.IMapViewManager.NumViews">
            <summary>
            Number of view point currently being tracked.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.IMapViewManager.AddView(Niantic.Lightship.Maps.ViewPoint@)">
            <summary>
            Adds the input view to the platform's collection of views to track.
            </summary>
            <returns>The new view's ID - will be InvalidViewId if the view could not be added.</returns>
            <param name="view">The view to be added.</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.IMapViewManager.GetView(System.Int32)">
             <summary>
             Gets the view with the input ID.
            
             This call can fail if the input ID is invalid.
             </summary>
             <returns>The requested view.</returns>
             <param name="id">The ID of the view to get.</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.IMapViewManager.RemoveView(System.Int32)">
             <summary>
             Removes the view with the input ID.
            
             No-op if the ID has no corresponding view.
             Any view can be removed, even that at MainViewId.
             </summary>
             <param name="id">The ID of the view to remove.</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.IMapViewManager.SetView(System.Int32,Niantic.Lightship.Maps.ViewPoint@)">
             <summary>
             Sets the view at the input ID to the input View.
            
             Fails if there AddView has never been called for the input ID, unless
             the input ID is equal to MainViewId.
             </summary>
             <param name="id">The ID to update.</param>
             <param name="view">The View to assign to the input ID.</param>
             <returns>True if the call was successful, false if it was not successful because either the
             view ID was invalid or if the map composition root had not been set</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Bundle.DecodeTileDataDelegate">
            <summary>
            A delegate that decodes raw bundle data downloaded from
            the CDN and parses it into a list of individual maptiles.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Bundle.IBundledTileFetchGroup">
            <summary>
            This type is used to manage multiple in-flight requests for
            individual maptiles which are all contained within a single
            maptile bundle, including downloading the bundle, decoding
            and parsing the data, and handing the decoded maptile back
            to any pending fetch requests once the download completes.
            </summary>
        </member>
        <member name="E:Niantic.Lightship.Maps.Internal.Bundle.IBundledTileFetchGroup.AllTilesCached">
            <summary>
            This event is raised when all of the tiles downloaded
            from this bundle have been written to the tile cache.
            </summary>
        </member>
        <member name="E:Niantic.Lightship.Maps.Internal.Bundle.IBundledTileFetchGroup.DownloadCanceled">
            <summary>
            This event is raised when a bundle's download is canceled.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.IBundledTileFetchGroup.BeginDownload(Niantic.Lightship.Maps.Coordinates.TileCoord,System.Int32,System.Int32,Niantic.Lightship.Maps.Internal.Bundle.DecodeTileDataDelegate)">
            <summary>
            Starts an asynchronous download of a maptile bundle
            </summary>
            <param name="bundleCoord">The bundle's coordinates</param>
            <param name="tileZoomLevel">The zoom level of
            the maptiles that this bundle contains</param>
            <param name="epoch">The maptile epoch</param>
            <param name="onSuccessfulDownload">A delegate that
            decodes maptile data from the raw serialized bundle
            downloaded from the network if the request succeeds</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.IBundledTileFetchGroup.RequestTile(Niantic.Lightship.Maps.Coordinates.TileCoord,System.Threading.CancellationToken)">
            <summary>
            Request a tile contained in our bundle
            </summary>
            <param name="tileCoord">The coordinates of the tile to fetch</param>
            <param name="cancellationToken">Used to cancel the request</param>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Bundle.IDebugBundledTileFetchGroup">
            <summary>
            This interface exposes some of <see cref="T:Niantic.Lightship.Maps.Internal.Bundle.BundledTileFetchGroup"/>'s
            members for unit test purposes.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Bundle.BundledTileFetchGroup">
            <inheritdoc cref="T:Niantic.Lightship.Maps.Internal.Bundle.IBundledTileFetchGroup" />
        </member>
        <member name="E:Niantic.Lightship.Maps.Internal.Bundle.BundledTileFetchGroup.AllTilesCached">
            <inheritdoc />
        </member>
        <member name="E:Niantic.Lightship.Maps.Internal.Bundle.BundledTileFetchGroup.DownloadCanceled">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.BundledTileFetchGroup.#ctor(Niantic.Lightship.Maps.Network.INetworkHandler,Niantic.Lightship.Maps.Internal.IMapTileCache,Niantic.Lightship.Maps.Internal.Bundle.ITileBundleUrlGenerator)">
            <summary>
            Constructor
            </summary>
            <param name="network">The network handler used to download bundles</param>
            <param name="cache">The local maptile cache</param>
            <param name="urlGenerator">An instance of the type
            used to generate URLs for downloaded bundles</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.BundledTileFetchGroup.Dispose">
            <summary>
            Cleans up any resources that may still be held
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.BundledTileFetchGroup.BeginDownload(Niantic.Lightship.Maps.Coordinates.TileCoord,System.Int32,System.Int32,Niantic.Lightship.Maps.Internal.Bundle.DecodeTileDataDelegate)">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.BundledTileFetchGroup.RequestTile(Niantic.Lightship.Maps.Coordinates.TileCoord,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.BundledTileFetchGroup.HandleDownloadFailure">
            <summary>
            Called when a bundle download fails
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.BundledTileFetchGroup.OnTileRequestCanceled(Niantic.Lightship.Maps.Internal.Bundle.TileFetchRequest)">
            <summary>
            This method is called by a <see cref="T:Niantic.Lightship.Maps.Internal.Bundle.TileFetchRequest"/> when it has been canceled.
            </summary>
            <param name="tileRequest">The canceled maptile request</param>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Bundle.Extensions.LabelExtensions">
            <summary>
            Extension methods for the <see cref="T:Niantic.Lightship.Maps.Proto.Label"/> proto type
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.Extensions.LabelExtensions.ToLabelInfo(Niantic.Lightship.Maps.Proto.Label,System.Single,System.Single)">
            <summary>
            Instantiates an <see cref="T:Niantic.Lightship.Maps.Features.ILabelInfo"/> from a <see cref="T:Niantic.Lightship.Maps.Proto.Label"/> proto type.
            </summary>
            <param name="label">The label proto</param>
            <param name="x">The label's x position</param>
            <param name="y">The label's x position</param>
            <returns>An <see cref="T:Niantic.Lightship.Maps.Features.ILabelInfo"/></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.Extensions.TileCoordExtensions.ToParentBundleCoord(Niantic.Lightship.Maps.Coordinates.TileCoord,System.Int32)">
            <summary>
            Gets the coordinate of the parent bundle that contains a given tile.  If the requested
            tile's zoom level is less than or equal to the bundle zoom offset, then tile coordinates
            (0, 0, 0) are returned instead.  This effectively clamps the parent zoom level to 0 rather
            than returning a negative zoom, which is not supported.
            </summary>
            <param name="this">The coordinates of a single tile</param>
            <param name="bundleZoomOffset">The zoom offset for the given tile's bundle</param>
            <returns>The parent bundle's coordinates, or (0, 0, 0)</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Bundle.ITileBundleUrlGenerator">
            <summary>
            Generates URLs for maptiles and bundles
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.ITileBundleUrlGenerator.GetMapTileUrl(Niantic.Lightship.Maps.Coordinates.TileCoord,System.Int32,System.Int32)">
            <summary>
            Generates a URL where the specified map tile can be downloaded
            </summary>
            <param name="coord">The coordinates of the tile whose URL will be generated</param>
            <param name="epoch">The epoch of the tile whose URL will be generated</param>
            <param name="bundledTileZoom">The zoom level of the tiles that this bundle contains</param>
            <returns>A URL to the given map tile</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Bundle.TileBundleUrlGenerator">
            <inheritdoc cref="T:Niantic.Lightship.Maps.Internal.Bundle.ITileBundleUrlGenerator" />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.TileBundleUrlGenerator.GetMapTileUrl(Niantic.Lightship.Maps.Coordinates.TileCoord,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Bundle.TileFetchRequest">
            <summary>
            This type represents an in-flight request for a
            single maptile contained within a maptile bundle.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Internal.Bundle.TileFetchRequest.TileCoord">
            <summary>
            The maptile's coordinates
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Internal.Bundle.TileFetchRequest.Task">
            <summary>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that's completed when
            either the tile's data has been successfully downloaded,
            the bundle download failed, or the request was canceled.
            </summary>
        </member>
        <member name="E:Niantic.Lightship.Maps.Internal.Bundle.TileFetchRequest.Canceled">
            <summary>
            This event is raised when the fetch request is canceled.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.TileFetchRequest.#ctor(Niantic.Lightship.Maps.Coordinates.TileCoord)">
            <summary>
            Constructor
            </summary>
            <param name="tileCoord">The maptile's coordinates</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.TileFetchRequest.Dispose">
            <summary>
            Dispose any resources that may still be held
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.TileFetchRequest.RegisterCancellationToken(System.Threading.CancellationToken)">
            <summary>
            Registers a delegate to handle the request being canceled.
            </summary>
            <param name="cancellationToken">The request's CancellationToken</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.TileFetchRequest.SetResult(Niantic.Lightship.Maps.Internal.MapTileData)">
            <summary>
            Completes the request with the maptile's data once it's available.
            </summary>
            <param name="mapTileData">The maptile's data</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.TileFetchRequest.SetFailed(Niantic.Lightship.Maps.Exceptions.BundledTileFetchException)">
            <summary>
            Marks the request as failed if an error occurred while
            downloading or processing the maptile's parent bundle.
            </summary>
            <param name="exception">An exception representing the error</param>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Bundle.V2.MapTileDecoderV2">
            <summary>
            Decodes individual maptile features from v2 maptile data
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.V2.MapTileDecoderV2.Decode(Niantic.Lightship.Maps.Internal.MapTileData,Niantic.Lightship.Maps.Internal.InternalMapTile)">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Bundle.V2.MapTileFetcherV2">
            <summary>
            Class for fetching v2 maptile bundles
            https://docs.google.com/document/d/16jZzvSUXnxoxtTozHjnxqsoJtWK5L6eb95XvASVfM-A/
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.V2.MapTileFetcherV2.#ctor(Niantic.Lightship.Maps.Network.INetworkHandler,Niantic.Lightship.Maps.Proto.MapProvider,System.String,System.Boolean)">
            <summary>
            Instantiates a MapTileFetcherV2
            </summary>
            <param name="network">An instance of the <see cref="T:Niantic.Lightship.Maps.Network.INetworkHandler"/>
            interface to use for making network requests</param>
            <param name="mapProvider">The MapProvider for the type of tiles that will be fetched</param>
            <param name="dataDirectory">The parent directory where the local tile cache database will be
            stored</param>
            <param name="clearOnOpen">If set, the cache is cleared before it is opened</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.V2.MapTileFetcherV2.StartNew(Niantic.Lightship.Maps.Network.INetworkHandler,Niantic.Lightship.Maps.Proto.MapProvider,System.String,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:Niantic.Lightship.Maps.Internal.Bundle.V2.MapTileFetcherV2"/>
            and calls its <see cref="M:Niantic.Lightship.Maps.Internal.Bundle.V2.MapTileFetcherV2.Start"/> method.
            </summary>
            <param name="network">An instance of the <see cref="T:Niantic.Lightship.Maps.Network.INetworkHandler"/>
            interface to use for making network requests</param>
            <param name="mapProvider">The MapProvider for the type of tiles that will be fetched</param>
            <param name="dataDirectory">The parent directory where the local tile cache database will be
            stored</param>
            <param name="clearOnOpen">If set, the cache is cleared before it is opened</param>
            <returns>A new MapTileFetcherBundle that's ready to be used for fetching tiles.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.V2.MapTileFetcherV2.Dispose">
            <summary>
            Dispose and clean up
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.V2.MapTileFetcherV2.Start">
            <summary>
            Enables tile fetching
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.V2.MapTileFetcherV2.Stop">
            <summary>
            Called when the application stops.  Shuts down all pending fetches,
            waits for completion, and resets the state of the instance.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.V2.MapTileFetcherV2.RequestTileAsync(Niantic.Lightship.Maps.Coordinates.TileCoord,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously request a map tile
            </summary>
            <param name="tileCoord">The coordinates of the tile to fetch</param>
            <param name="epoch">The epoch of the tile to fetch</param>
            <param name="cancellationToken">A cancellation token that will cancel the task</param>
            <returns>A Task that will be completed when the map tile data finishes loading</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.V2.MapTileFetcherV2.RequestTileFetch(Niantic.Lightship.Maps.Coordinates.TileCoord,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Request an individual maptile
            </summary>
            <param name="tileCoord">The maptile's coordinates</param>
            <param name="epoch">The maptile epoch</param>
            <param name="cancellationToken">Used to cancel this request</param>
            <returns>A Task that will be completed when the tile's data is available</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.V2.MapTileFetcherV2.CreateFetchGroup(Niantic.Lightship.Maps.Coordinates.TileCoord,Niantic.Lightship.Maps.Coordinates.TileCoord,System.Int32,System.ValueTuple{System.UInt64,System.Int32})">
            <summary>
            Creates a new <see cref="T:Niantic.Lightship.Maps.Internal.Bundle.BundledTileFetchGroup"/> for
            a bundle whose download isn't currently in progress.
            </summary>
            <param name="bundleCoord">The bundle's coordinates</param>
            <param name="tileCoord">The coordinates of the maptile
            that initiated this bundle's download</param>
            <param name="epoch">The maptile epoch</param>
            <param name="pendingFetchKey">A key that identifies this bundle</param>
            <returns>A new <see cref="T:Niantic.Lightship.Maps.Internal.Bundle.IBundledTileFetchGroup"/></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Bundle.V2.MapTileFetcherV2.DecodeTileData(System.Byte[],Niantic.Lightship.Maps.Coordinates.TileCoord)">
            <summary>
            Decodes a list of <see cref="T:Niantic.Lightship.Maps.Internal.TileData"/> from
            a raw byte array downloaded from the network.
            </summary>
            <param name="rawTileData">The downloaded data</param>
            <param name="bundleCoord">The bundle's coordinates</param>
            <returns>A list of <see cref="T:Niantic.Lightship.Maps.Internal.MapTileData"/> objects</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.IMapTileDecoder">
            <summary>
            The MapTileDecoder is responsible for converting a blob of memory into actionable tile data.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.IMapTileDecoder.Decode(Niantic.Lightship.Maps.Internal.MapTileData,Niantic.Lightship.Maps.Internal.InternalMapTile)">
            <summary>
            Decodes a map tile into whatever format the tile is encoded with.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.IMapTileFetcher">
            <summary>
            Responsible for pulling map tiles.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.IMapTileFetcher.Start">
            <summary>
            Enables tile fetching
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.IMapTileFetcher.Stop">
            <summary>
            Called when the application stops. Shuts down all pending fetches waits for completion and
            resets the state of the instance.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.IMapTileFetcher.RequestTileAsync(Niantic.Lightship.Maps.Coordinates.TileCoord,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously request a map tile
            </summary>
            <param name="tileCoord">The coordinates of the tile to fetch</param>
            <param name="epoch">The epoch of the tile to fetch</param>
            <param name="cancellationToken">A cancellation token that will cancel the task</param>
            <returns>A Task that will be completed when the map tile data finishes loading</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.IMapTileProvider">
            <summary>
            Represents a provider of map tiles like Google Maps or Open Street Maps
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.IMapTileProviderFactory">
            <summary>
            This interface creates map tile providers given the map tile provider proto
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Internal.InternalMapTile.Id">
            <summary>
            The tile ID consists of some hash from x, y, and level
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.MapTile">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Internal.MapTile.Id">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Internal.MapTile.Origin">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Internal.MapTile.Size">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Internal.MapTile.Level">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Internal.MapTile.TileCoordinateString">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTile.GetTileDataOfType``1(Niantic.Lightship.Maps.Proto.LayerKind)">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTile.GetTileDataOfType``1(Niantic.Lightship.Maps.Proto.LayerKind,Niantic.Lightship.Maps.Proto.FeatureKind)">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTile.GetTileData(Niantic.Lightship.Maps.Proto.LayerKind)">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTile.GetTileData(Niantic.Lightship.Maps.Proto.LayerKind,Niantic.Lightship.Maps.Proto.FeatureKind)">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTile.BeginReceiveData">
            <summary>
            Invoked when the MapTileStreamService starts adding map
            features to this tile.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTile.EndReceiveData">
            <summary>
            Invoked when the MapTileStreamService finishes adding map
            features to this tile.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.IMapTileCache">
            <summary>
            This class is responsible for maintaining a local cache of downloaded maptile data
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.IMapTileCache.Initialize">
            <summary>
            Initialize the map tile cache.  This must be called before the cache is used.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.IMapTileCache.Shutdown">
            <summary>
            Shut the cache down and wait for its worker thread to finish
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.IMapTileCache.RequestTileAsync(Niantic.Lightship.Maps.Coordinates.TileCoord,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Request an asynchronous read of a tile's data from the cache
            </summary>
            <param name="tileCoord">The tile to read</param>
            <param name="epoch">The epoch of the tile to read</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the
            asynchronous task</param>
            <returns>A Task that will be completed when a tile is read from the
            cache.  The Task's Result will be null if the requested tile is not cached.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.IMapTileCache.AddTilesAsync(System.Collections.Generic.List{Niantic.Lightship.Maps.Internal.MapTileData})">
            <summary>
            Request an asynchronous write of a group of tile data to the cache
            </summary>
            <param name="mapTileData">The tiles to write</param>
            <returns>A Task that will be completed when the tiles are written to the cache.</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.MapTileCache">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.MapTileCache.TileReadRequest">
            <summary>
            A class that represents all queued requests for a given map tile
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.MapTileCache.TileWriteRequest">
            <summary>
            A class that represents a request to write a single tile to the cache
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.MapTileCache.GroupedTileWriteRequest">
            <summary>
            A class that represents a request to write a group of tiles to the cache
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileCache.#ctor(System.String,System.String,System.Int64,System.Boolean)">
            <summary>
            Instantiate a map tile cache
            </summary>
            <param name="name">The name of the file that the database is stored in</param>
            <param name="parentDir">The parent directory where the database is written</param>
            <param name="cacheSizeBytes">The size, in bytes, of the cache database</param>
            <param name="clearOnOpen">If set, clear all data from the database before opening it</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileCache.Dispose">
            <summary>
            Shut down and dispose the cache
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileCache.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileCache.Shutdown">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileCache.EnsureCacheInitialized">
            <summary>
            Initialize the internal cache if it hasn't been already
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileCache.RunThread">
            <summary>
            Runs the SQLite worker thread.  This allows us to batch reads and writes into transactions,
            which improves performance.  SQLite serializes access internally anyway, so there isn't any
            benefit in calling SQLite from multiple threads in parallel.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileCache.ProcessReadRequests">
            <summary>
            Dequeue and process any pending read requests
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileCache.ProcessWriteRequests">
            <summary>
            Dequeue and process any pending write requests
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileCache.RequestTileAsync(Niantic.Lightship.Maps.Coordinates.TileCoord,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileCache.AddTilesAsync(System.Collections.Generic.List{Niantic.Lightship.Maps.Internal.MapTileData})">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileCache.QueueTileForAdd(Niantic.Lightship.Maps.Internal.MapTileData,System.Threading.Tasks.TaskCompletionSource{System.Boolean})">
            <summary>
            Queue a request for an asynchronous write of a tile's data to the cache
            </summary>
            <param name="mapTileData">The tile to write</param>
            <param name="tcs">A TaskCompletionSource that can be used to let the caller know when the
            write request has completed</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileCache.QueueTilesForAdd(System.Collections.Generic.List{Niantic.Lightship.Maps.Internal.MapTileData},System.Threading.Tasks.TaskCompletionSource{System.Boolean})">
            <summary>
            Queue a request for an asynchronous write of a group of tile data to the cache
            </summary>
            <param name="mapTileData">The tiles to write</param>
            <param name="tcs">A TaskCompletionSource that can be used to let the caller know when the
            write request has completed</param>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.MapTileManager">
            <summary>
            The map tile selector is responsible for computing what map tiles should be requested to
            resolve the map view point.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileManager.IsIdle">
            <summary>
            Is the tile manager idle?
            </summary>
            <returns>True if the processor has any in-progress tile requests</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileManager.Reset">
            <summary>
            Reset the tile manager back to its initial state
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileManager.Start">
            <summary>
            Start the tile manager
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileManager.Stop">
            <summary>
            Stop the tile manager
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileManager.SetView(System.Collections.Generic.Dictionary{System.Int32,Niantic.Lightship.Maps.ViewPoint})">
            <summary>
            Sets any active viewpoint's view, and queues tiles to be fetched and processed if necessary
            </summary>
            <param name="viewpoints">The viewpoints whose views should be set</param>
            <returns>True if SetView succeeded, false if it failed because the server settings had not
            been set</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileManager.CompareToCenterViewPoint(Niantic.Lightship.Maps.Internal.InternalMapTile,Niantic.Lightship.Maps.Internal.InternalMapTile)">
            <summary>
            Comparer that is used to sort tile requests such that the closest tiles to the
            center of the viewpoint are processed before tiles that are further away.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileManager.GetDistanceSquared(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the squared distance from one point to another, used by GetTileDistanceComparer
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileManager.SyncReadyTiles(Niantic.Lightship.Maps.ITileStreamServiceInternal)">
            <summary>
            Syncs the collection of active tiles on the client side with those that have finished
            processing.  Any tiles that have finished since the last time this method was called will be
            added to the client side, and any tiles that are active on the client side but that are no
            longer in view will be deleted.  This method is meant to be called from Unity's main thread,
            since adding and deleting tiles could end up calling back into Unity.
            </summary>
            <param name="tileStreamService"></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileManager.RemoveView(System.Int32)">
            <summary>
            Remove a viewpoint that's no longer active
            </summary>
            <param name="id">The id of the viewpoint to move</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileManager.ComputeTileZoomLevel(Niantic.Lightship.Maps.ViewPoint@,System.Double,System.Int32,System.Int32)">
            <summary>
            Computes the desired tile zoom level based on the viewpoint and the maximum allowed number
            of tiles.
            </summary>
            <param name="viewpoint"></param>
            <param name="tileCount"></param>
            <param name="minLevel"></param>
            <param name="maxLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileManager.DesiredTileSizeM(System.Double,System.Int32)">
            <summary>
            Calculates the desired tile size in meters, based on the max tile count allowed and the
            needed map area radius.
            </summary>
            <param name="mapAreaRadiusM"></param>
            <param name="tileCount"></param>
            <returns></returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.MapTilePipeline">
            <summary>
            Wrapper class for the pair of MapTileProviderRef and MapAreaRef from a single tile request.
            A particular tile request involves requesting the tile from the map tile provider using the
            parameters from the map area the tile is located in.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTilePipeline.IsValid">
            <summary>
            Return if the pipeline is correctly initialized.
            The above functions are not supported if not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTilePipeline.Provider">
            <summary>
            Visible for testing
            </summary>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTilePipelineManager.StartAllFetchers">
            <summary>
            Starts, stops, or flushes all the fetchers in each current map tile provider.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTilePipelineManager.Reset">
            <summary>
            Reset all the map tile providers
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.MapTilePipelineManager.ProviderDetails">
            <summary>
            The description of a single pipeline (map tile provider)
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.MapTileProcessor">
            <summary>
            Responsible for processing decoded map tiles and dispatching the content back to Unity via the
            MapTileEventHandler.  The tile processor contains 2 queues that are updated asynchronously and
            at various stages of the map view processing.
            - The ToDelete queue gathers all the tiles that are scheduled to be removed from the map
              because they are no longer relevant.
            - The ToCreate queue gathers all the tiles that are relevant to the map and need or are in the
              process of being loaded.
            - The ToProcess queue contains all tiles that have been fetched and decoded and can now be
              sent back to Unity for rendering.  On a regular basis, Unity will sync with the map tile
              processor and check what needs to be done.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.MapTileProcessor.FetchContext">
            <summary>
            The context used to perform a fetch.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileProcessor.IsIdle">
            <summary>
            Returns true if the processor is idle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileProcessor.ClearPendingFetches">
            <summary>
            Clear any pending fetches
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileProcessor.CancelProcessing(Niantic.Lightship.Maps.Internal.InternalMapTile)">
            <summary>
            Request that a tile's processing is cancelled if the results are no longer needed.  Note
            that cancellation is cooperative, so the request may not be cancelled immediately, and if
            the task is sufficiently far along it may run to completion.
            </summary>
            <param name="mapTile">The map tile to cancel</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileProcessor.Start">
            <summary>
            Starts map tile processing.
            Essentially confidence checks the processor before feeding it with tiles
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileProcessor.Stop">
            <summary>
            Cancels all tiles queued for processing. Reset queues.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileProcessor.Reset">
            <summary>
            Resets the map tile processor to its original state
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileProcessor.IsQueuedForProcessing(Niantic.Lightship.Maps.Internal.InternalMapTile)">
            <summary>
            Checks if a given tile is queued for processing
            </summary>
            <param name="mapTile">The map to check</param>
            <returns>True if the tile is currently in the queue</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileProcessor.QueueForProcessing(Niantic.Lightship.Maps.Internal.InternalMapTile,Niantic.Lightship.Maps.Internal.MapTilePipeline)">
            <summary>
            Start a task to fetch a tile asynchronously and prepare it for processing
            </summary>
            <param name="tile">The tile to fetch and process</param>
            <param name="pipeline">The pipeline to use when fetching this tile</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileProcessor.GetAndClearReadyTiles(System.Collections.Generic.Dictionary{System.UInt64,Niantic.Lightship.Maps.Internal.MapTile})">
            <summary>
            Gets all of the tiles that have finished being processed since the last time this method was
            called, fills a Dictionary of ready tiles indexed by their tile id.
            </summary>
            <returns>true iff there were ready tiles transferred</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.MapTileProviderFactory">
            <summary>
            This interface creates map tile providers given the map tile provider proto
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.MapTileStreamService">
             <summary>
             This is basically an adapter class so clients can use the friendlier
             ITileStreamService instead of the IMapTileManager.
            
             It implements IMapTileManager so it can receive callbacks from Ditto
             whenever a new feature is added to the tile. It generates events
             when the full tiles are constructed.
             </summary>
        </member>
        <member name="E:Niantic.Lightship.Maps.Internal.MapTileStreamService.MapTileDataReady">
            <inheritdoc />
        </member>
        <member name="E:Niantic.Lightship.Maps.Internal.MapTileStreamService.MapTileDeleted">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.Internal.MapTileStreamService.ActiveTiles">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileStreamService.AddReadyTile(Niantic.Lightship.Maps.IMapTile)">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.MapTileStreamService.DeleteTile(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.MapViewManager">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Parse.TileCrypt">
            <summary>
            We're contractually obligated to "encrypt" the vector data that we send to the client. This
            class implements said encryption using ARC4. The ARC4 algorithm is publicly available. See
            <see href="http://en.wikipedia.org/wiki/RC4"/>. ARC4 has some serious weaknesses, but it's
            quite fast, and should be good enough for our purposes.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Parse.TileCrypt.Init(System.Byte[],System.Int32)">
            <summary>
            Initializes the this TileCrypt object with a new key. Use generate_key_for_tile to generate
            a suitable key. Also, since the first few bytes in the stream leak information about the
            key, they should not be used. Use bytesToDiscard to specify how much of the stream to skip.
            </summary>
            <param name="key">The key to initialize TileCrypt with.</param>
            <param name="bytesToDiscard">The number of bytes in the stream to discard.</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Parse.TileCrypt.Skip(System.Int32)">
            <summary>
            Skips a given number of bytes in the pseudo-random number stream.
            </summary>
            <param name="numBytes">The number of bytes to skip.</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Parse.TileCrypt.Crypt(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Encrypts or decrypts a block of data in place. Since this uses a symmetric
            cipher, the same function is used to do both.
            </summary>
            <param name="inData">Array containing the block of data to encrypt or decrypt.</param>
            <param name="inLength">Length of the block to encrypt or decrypt.</param>
            <param name="outData"></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Parse.TileCrypt.GenerateKeyForTileV1(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a suitable key for encrypting a given tile. This ensures that the
            same key is not used to encrypt different tiles, which could allow an
            adversary to recover the key through statistical analysis.
            </summary>
            <param name="x">The x coordinate of the tile.</param>
            <param name="y">The y coordinate of the tile.</param>
            <param name="zoom">The zoom level of the tile.</param>
            <param name="tileVersion">The version of the tile.</param>
            <returns>The 32-byte key to use for encryption</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Parse.TileCrypt.GenerateKeyForTileV2(System.Int32,System.Int32,System.Int32,System.UInt16,System.Int32)">
            <summary>
            Generates a suitable key for encrypting a given tile. This ensures that the
            same key is not used to encrypt different tiles, which could allow an
            adversary to recover the key through statistical analysis.
            </summary>
            <param name="x">The x coordinate of the tile.</param>
            <param name="y">The y coordinate of the tile.</param>
            <param name="zoom">The zoom level of the tile.</param>
            <param name="protocolVersion">The version of the tile encoding from the header.</param>
            <param name="tileVersion">The version of the tile from the header.</param>
            <returns>The 32-byte key to use for encryption</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Parse.TileCrypt.GenerateKeyForTileV3(System.Int32,System.Int32,System.Int32,System.UInt16,System.Int32,System.Int64)">
            <summary>
            Generates a suitable key for encrypting a given tile. This ensures that the
            same key is not used to encrypt different tiles, which could allow an
            adversary to recover the key through statistical analysis.
            </summary>
            <param name="x">The x coordinate of the tile.</param>
            <param name="y">The y coordinate of the tile.</param>
            <param name="zoom">The zoom level of the tile.</param>
            <param name="protocolVersion">The version of the tile encoding from the header.</param>
            <param name="tileVersion">The version of the tile from the header.</param>
            <param name="tileKey">The tile specific key from the header.</param>
            <returns>The 40-byte key to use for encryption</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Parse.TileCrypt.CreateKeyForTileV3(System.Int32,System.Int32,System.Int32,System.UInt16,System.Int32,System.Int64)">
            <summary>
            Returns a key suitable for encrypting a DriveAbout version 3 tile.
            </summary>
            <param name="x">The x coordinate of the tile.</param>
            <param name="y">The y coordinate of the tile.</param>
            <param name="zoom">The zoom level of the tile.</param>
            <param name="protocolVersion">The version of the tile encoding from the header.</param>
            <param name="tileVersion">The version of the tile from the header.</param>
            <param name="tileKey">The tile specific key from the header.</param>
            <returns>The 40-byte key to use for encryption</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Parse.TileCrypt.GenerateKeyBase">
            <summary>
            Returns the encryption key for tiles. This is generated from kKeyPart1 and kKeyPart2.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Settings.GetMaptilesSettingsResponseExtensions">
            <summary>
            Extension methods for <see cref="T:Niantic.Lightship.Maps.Proto.GetMaptilesSettingsResponse"/>
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Settings.GetMaptilesSettingsResponseExtensions.WasFailure(Niantic.Lightship.Maps.Proto.GetMaptilesSettingsResponse)">
            <summary>
            Checks the response proto for success.
            </summary>
            <param name="response">The response proto</param>
            <returns>True if the call was successful</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Settings.GetMaptilesSettingsResponseExtensions.GetFailureMessage(Niantic.Lightship.Maps.Proto.GetMaptilesSettingsResponse)">
            <summary>
            Gets a string formatted for logging purposes from a failed response proto.
            </summary>
            <param name="response">The response proto</param>
            <returns>A formatted error message string</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Settings.IMaptileSettings">
            <summary>
            Settings that define maptile providers to use for a
            set of geographic areas.  These settings include epoch
            numbers, maptile CDN URLs, and supported zoom levels.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Internal.Settings.IMaptileSettings.Providers">
            <summary>
            A <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> of all configured
            <see cref="T:Niantic.Lightship.Maps.Proto.MapProvider"/>s, indexed by the provider's name.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Settings.IMaptileSettings.FindFirstArea(System.Double,System.Double,System.Int32,System.Version)">
            <summary>
            Finds the first <see cref="T:Niantic.Lightship.Maps.Proto.MapArea"/> that contains a given
            lat/lng position and that supports the specified zoom level
            and client version.
            </summary>
            <param name="latitudeDeg">Latitude, in degrees</param>
            <param name="longitudeDeg">Longitude, in degrees</param>
            <param name="zoomLevel">The desired zoom level</param>
            <param name="clientVersion">The client's version number</param>
            <returns>A <see cref="T:Niantic.Lightship.Maps.Proto.MapProvider"/> and <see cref="T:Niantic.Lightship.Maps.Proto.MapArea"/>
            that supports the requested geographic position.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Settings.IMaptileSettings.GetUpdatedProviders(Niantic.Lightship.Maps.Internal.Settings.IMaptileSettings)">
            <summary>
            Compares the current settings with another settings instance and
            returns the names of any <see cref="T:Niantic.Lightship.Maps.Proto.MapProvider"/>s that differ.
            </summary>
            <param name="oldSettings"></param>
            <returns>The names of providers that changed</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Settings.IDebugMaptileSettings">
            <summary>
            This interface exposes private members that
            are intended to be used in test code only.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Settings.MaptileSettings">
            <inheritdoc cref="T:Niantic.Lightship.Maps.Internal.Settings.IMaptileSettings" />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Settings.MaptileSettings.FromCompositionRoot(Niantic.Lightship.Maps.Proto.MapCompositionRoot,System.String)">
            <summary>
            Instantiates a <see cref="T:Niantic.Lightship.Maps.Internal.Settings.MaptileSettings"/>
            from a <see cref="T:Niantic.Lightship.Maps.Proto.MapCompositionRoot"/> proto
            (which is typically downloaded from a server).
            </summary>
            <param name="compositionRoot">The downloaded proto</param>
            <param name="gameName">The current project's name</param>
            <returns>A new settings instance</returns>
        </member>
        <member name="P:Niantic.Lightship.Maps.Internal.Settings.MaptileSettings.Providers">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Settings.MaptileSettings.FindFirstArea(System.Double,System.Double,System.Int32,System.Version)">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Settings.MaptileSettings.GetUpdatedProviders(Niantic.Lightship.Maps.Internal.Settings.IMaptileSettings)">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Settings.ISettingsService">
            <summary>
            This interface is used to receive and respond to
            changes in the maptile library's settings (which are
            typically downloaded from a server or http endpoint).
            </summary>
        </member>
        <member name="E:Niantic.Lightship.Maps.Internal.Settings.ISettingsService.SettingsChanged">
            <summary>
            This event is raised the first time our settings
            are downloaded and any time they change at runtime.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Settings.SettingsService">
            <inheritdoc cref="T:Niantic.Lightship.Maps.Internal.Settings.ISettingsService" />
        </member>
        <member name="E:Niantic.Lightship.Maps.Internal.Settings.SettingsService.SettingsChanged">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Settings.SettingsService.#ctor(System.String,System.String)">
            <summary>
            <see cref="T:Niantic.Lightship.Maps.Internal.Settings.SettingsService"/> constructor
            </summary>
            <param name="apiKey">An API key for this
            project's Lightship developer account</param>
            <param name="gameName">This project's name</param>
            <exception cref="T:Niantic.Lightship.Maps.Exceptions.InvalidLightshipApiKeyException">Thrown if the
            Lightship API key is invalid (eg, if it's null or empty)</exception>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Storage.CacheRecord">
            <summary>
            Represents a single record (a map tile's raw data) stored in the local tile cache.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.Dispose">
            <summary>
            Close the database connection
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.DisposeConnection">
            <summary>
            Dispose the database connection
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.OpenDatabase(System.String)">
            <summary>
            Initialize the database at the path.   If the file doesn't exist, then a new database
            will be created and initialized.
            </summary>
            <param name="dbPath">The path to the database file on disk</param>
            <returns>True if the database was opened successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.SetItem(Niantic.Lightship.Maps.Internal.Storage.CacheRecord)">
            <summary>
            Inserts or updates a cache item.  This automatically updates the LRU last
            access time for the item.
            </summary>
            <param name="cacheRecord"></param>
            <returns>True if executed successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.FindItem(System.Int64)">
            <summary>
            Gets a cache item and returns the cache data, cost, and epoch for the item as a tuple.
            If no item is found, then the returned value will be null.
            </summary>
            <param name="key"></param>
            <returns>The item if found, null otherwise</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.Size">
            <summary>
            Get the total number of items in the cache
            </summary>
            <returns>The total number of items in the cache</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.Clear">
            <summary>
            Clear the cache and epoch tables
            </summary>
            <returns>True if executed successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.BeginTransaction">
            <summary>
            Begins a SQL transaction
            </summary>
            <returns>True if executed successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.CommitTransaction">
            <summary>
            Commits a SQL transaction
            </summary>
            <returns>True if executed successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.CompactDatabase">
            <summary>
            Compact the database so that it takes the minimum size possible in the file system
            </summary>
            <returns>True if executed successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.UpdateLastAccess(System.Int64)">
            <summary>
            Update the LRU last access time for the item
            </summary>
            <param name="key"></param>
            <returns>True if executed successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.VisitRowsLru(System.Func{System.Int64,System.Boolean})">
            <summary>
            Iterate over rows in the cache sorted by the least recently accessed
            </summary>
            <param name="visitor"></param>
            <returns>True if executed successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.DeleteRowsLru(System.Int32)">
            <summary>
            Delete a number of rows from the cache sorted by the lest recently accessed
            </summary>
            <param name="rows"></param>
            <returns>True if executed successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.UpdateEpochLastFetched(System.Int64,System.DateTime)">
            <summary>
            Updates the epoch to have a valid fetch time of now
            </summary>
            <param name="epoch"></param>
            <param name="age"></param>
            <returns>True if executed successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.GetTotalCost">
            <summary>
            Gets the sum total cost of all items in the cache
            </summary>
            <returns>The total cost of all items in the cache</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.CreateDatabase">
            <summary>
            Creates all tables necessary for the database cache.  It is assumed that the database
            is empty of all tables (except for the version table and any built-in sqlite tables)
            </summary>
            <returns>True if the database was created successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.TableExists(System.String)">
            <summary>
            Tests if a table exists in the database
            </summary>
            <param name="table">The name of the table to check</param>
            <returns>True if the table exists</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.Version">
            <summary>
            Gets the current database schema version
            </summary>
            <returns>The database schema version</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.SetVersion(System.Int32)">
            <summary>
            Sets the current database schema version
            </summary>
            <param name="version"></param>
            <returns>True if executed successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.PrepareInitialStatements">
            <summary>
            Prepare statements used before the schema version is checked
            </summary>
            <returns>True if executed successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.PrepareVersionStatements">
            <summary>
            Prepare statements used for schema version checking
            </summary>
            <returns>True if executed successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDatabase.PrepareStatements">
            <summary>
            Prepare all other statements
            </summary>
            <returns>True if executed successfully</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Storage.LruDiskCache">
            <summary>
            LruDiskCache is a basic cache of objects where the cache size is limited to a maximum cost.
            What cost means is up to the client.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDiskCache.#ctor(System.String,System.String,System.Int64,System.Boolean)">
            <summary>
            Construct a new cache.  Name is used to uniquely identify the cache file on the file system.
            It should be unique per instance of this class.
            </summary>
            <param name="name"></param>
            <param name="parentDir"></param>
            <param name="maxCost"></param>
            <param name="clearOnOpen"></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDiskCache.Begin">
            <summary>
            Begin a database transaction
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDiskCache.Commit">
            <summary>
            Commit a database transaction
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDiskCache.Trim(System.Int64)">
            <summary>
            Trims the cache so that the sum total cost of all items is less than or equal max_cost.
            </summary>
            <param name="maxCost"></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDiskCache.InsertOrAssign(Niantic.Lightship.Maps.Internal.Storage.CacheRecord)">
            <summary>
            In the style of std::map::insert_or_assign, inserts a new element or assigns it a new value
            if it already existed.  Returns true if it is inserted or false if the item was updated.
            </summary>
            <param name="value"></param>
            <returns>True if it is inserted or false if the item was updated</returns>
        </member>
        <member name="P:Niantic.Lightship.Maps.Internal.Storage.LruDiskCache.Item(System.Int64)">
            <summary>
            Returns a reference to the cache item if it exists, or null if it does not exist in the
            cache.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDiskCache.At(System.Int64)">
            <summary>
            Gets the item cached at the given key with its epoch
            </summary>
            <param name="key">The key to query for</param>
            <returns>The key's cached value and epoch</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDiskCache.Size">
            <summary>
            Get the total number of items in the cache
            </summary>
            <returns>The total number of items in the cache</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDiskCache.Clear">
            <summary>
            Deletes all contents of the cache.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDiskCache.ClearFile">
            <summary>
            Deletes the entire cache file and makes a new one.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.LruDiskCache.OpenDatabase(System.Boolean)">
            <summary>
            Resets the database connection, optionally deleting the database file to recreate it.
            </summary>
            <param name="clear">If set, clear the database's contents after opening</param>
            <returns>True if the database opened successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteDatabase.FromFilePath(System.String)">
            <summary>
            Creates or opens a database saved to a file on disk
            </summary>
            <param name="databaseFilePath">Path to the database file</param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteDatabase.OpenConnection">
            <summary>
            Opens a connection to the database
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteDatabase.Dispose">
            <summary>
            Closes an open connection to the database
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteDatabase.GetLastError">
            <summary>
            Gets the error message from the last failed SQLite call
            </summary>
            <returns>An error message string</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteDatabase.GetErrorString(Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode)">
            <summary>
            Gets an error string from a SQLiteReturnCode
            </summary>
            <param name="returnCode">The return code to convert to a string</param>
            <returns>A string representation of the return code</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteDatabase.PrepareStatement(System.String)">
            <summary>
            Constructs a SQLite prepared statement, which represents a single SQL
            statement that has been compiled and is ready for evaluation.
            </summary>
            <param name="queryString">A SQL statement to be evaluated</param>
            <returns>A compiled prepared statement</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteDatabase.ExecuteNonQuery(System.String)">
            <summary>
            Executes a single SQL statement with no return values
            </summary>
            <param name="sqlString">The SQL statement to execute</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteDatabase.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes a single SQL statement with no return values
            </summary>
            <param name="sqlString">The SQL statement to execute</param>
            <param name="parameters">Parameters to pass into the specified SQL statement</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteException.ThrowOnError(Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode,System.String)">
            <summary>
            Throws a SQLiteException for return codes other than SQLiteReturnCode.Ok for error handling
            </summary>
            <param name="returnCode">The return code to check</param>
            <param name="message">The message to include in the thrown exception if an error has occurred</param>
            <exception cref="T:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteException"></exception>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteException.ThrowOnError(Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode,System.String,System.Object[])">
            <summary>
            Throws a SQLiteException for return codes other than SQLiteReturnCode.Ok for error handling
            </summary>
            <param name="returnCode"></param>
            <param name="messageFormat">A format string for the message to include in the thrown
            exception if an error has occurred</param>
            <param name="args">Arguments used to format the message string</param>
            <exception cref="T:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteException"></exception>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteNative">
            <summary>
            Native SQLite functions that can be P/Invoked from managed code
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode">
            <summary>
            SQLite return codes
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Unknown">
            <summary>
            The error code is unknown.  This error code
            is only used by the managed wrapper itself.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Ok">
            <summary>
            Successful result
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Error">
            <summary>
            SQL error or missing database
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Internal">
            <summary>
            Internal logic error in SQLite
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Perm">
            <summary>
            Access permission denied
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Abort">
            <summary>
            Callback routine requested an abort
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Busy">
            <summary>
            The database file is locked
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Locked">
            <summary>
            A table in the database is locked
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.NoMem">
            <summary>
            A malloc() failed
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ReadOnly">
            <summary>
            Attempt to write a readonly database
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Interrupt">
            <summary>
            Operation terminated by sqlite3_interrupt()
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErr">
            <summary>
            Some kind of disk I/O error occurred
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Corrupt">
            <summary>
            The database disk image is malformed
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.NotFound">
            <summary>
            Unknown opcode in sqlite3_file_control()
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Full">
            <summary>
            Insertion failed because database is full
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.CantOpen">
            <summary>
            Unable to open the database file
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Protocol">
            <summary>
            Database lock protocol error
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Empty">
            <summary>
            Database is empty
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Schema">
            <summary>
            The database schema changed
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.TooBig">
            <summary>
            String or BLOB exceeds size limit
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Constraint">
            <summary>
            Abort due to constraint violation
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Mismatch">
            <summary>
            Data type mismatch
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Misuse">
            <summary>
            Library used incorrectly
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.NoLfs">
            <summary>
            Uses OS features not supported on host
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Auth">
            <summary>
            Authorization denied
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Format">
            <summary>
            Auxiliary database format error
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Range">
            <summary>
            2nd parameter to sqlite3_bind out of range
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.NotADb">
            <summary>
            File opened that is not a database file
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Notice">
            <summary>
            Notifications from sqlite3_log()
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Warning">
            <summary>
            Warnings from sqlite3_log()
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Row">
            <summary>
            sqlite3_step() has another row ready
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.Done">
            <summary>
            sqlite3_step() has finished executing
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.NonExtendedMask">
            <summary>
            Used to mask off extended result codes
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ErrorMissingCollSeq">
            <summary>
            A collation sequence was referenced by a schema and it cannot be
            found.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ErrorRetry">
            <summary>
            An internal operation failed and it may succeed if retried.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrRead">
            <summary>
            A file read operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrShortRead">
            <summary>
            A file read operation returned less data than requested.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrWrite">
            <summary>
            A file write operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrFsync">
            <summary>
            A file synchronization operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrDirFsync">
            <summary>
            A directory synchronization operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrTruncate">
            <summary>
            A file truncate operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrFstat">
            <summary>
            A file metadata operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrUnlock">
            <summary>
            A file unlock operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrRdLock">
            <summary>
            A file lock operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrDelete">
            <summary>
            A file delete operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrBlocked">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrNoMem">
            <summary>
            Out-of-memory during a file operation.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrAccess">
            <summary>
            A file existence/status operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrCheckReservedLock">
            <summary>
            A check for a reserved lock failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrLock">
            <summary>
            A file lock operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrClose">
            <summary>
            A file close operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrDirClose">
            <summary>
            A directory close operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrShmOpen">
            <summary>
            A shared memory open operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrShmSize">
            <summary>
            A shared memory size operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrShmLock">
            <summary>
            A shared memory lock operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrShmMap">
            <summary>
            A shared memory map operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrSeek">
            <summary>
            A file seek operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrDeleteNoEnt">
            <summary>
            A file delete operation failed because it does not exist.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrMemMap">
            <summary>
            A file memory mapping operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrGetTempPath">
            <summary>
            The temporary directory path could not be obtained.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrConvPath">
            <summary>
            A path string conversion operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrVNode">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrAuth">
            <summary>
            An attempt to authenticate failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrBeginAtomic">
            <summary>
            An attempt to begin a file system transaction failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrCommitAtomic">
            <summary>
            An attempt to commit a file system transaction failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.IoErrRollbackAtomic">
            <summary>
            An attempt to rollback a file system transaction failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.LockedSharedCache">
            <summary>
            A database table is locked in shared-cache mode.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.LockedVtab">
            <summary>
            A virtual table in the database is locked.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.BusyRecovery">
            <summary>
            A database file is locked due to a recovery operation.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.BusySnapshot">
            <summary>
            A database file is locked due to snapshot semantics.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.CantOpenNoTempDir">
            <summary>
            A database file cannot be opened because no temporary directory is available.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.CantOpenIsDir">
            <summary>
            A database file cannot be opened because its path represents a directory.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.CantOpenFullPath">
            <summary>
            A database file cannot be opened because its full path could not be obtained.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.CantOpenConvPath">
            <summary>
            A database file cannot be opened because a path string conversion operation failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.CorruptVtab">
            <summary>
            A virtual table is malformed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.CorruptSequence">
            <summary>
            A required sequence table is missing or corrupt.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ReadOnlyRecovery">
            <summary>
            A database file is read-only due to a recovery operation.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ReadOnlyCantLock">
            <summary>
            A database file is read-only because a lock could not be obtained.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ReadOnlyRollback">
            <summary>
            A database file is read-only because it needs rollback processing.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ReadOnlyDbMoved">
            <summary>
            A database file is read-only because it was moved while open.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ReadOnlyCantInit">
            <summary>
            The shared-memory file is read-only and it should be read-write.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ReadOnlyDirectory">
            <summary>
            Unable to create journal file because the directory is read-only.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.AbortRollback">
            <summary>
            An operation is being aborted due to rollback processing.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ConstraintCheck">
            <summary>
            A CHECK constraint failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ConstraintCommitHook">
            <summary>
            A commit hook produced a unsuccessful return code.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ConstraintForeignKey">
            <summary>
            A FOREIGN KEY constraint failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ConstraintFunction">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ConstraintNotNull">
            <summary>
            A NOT NULL constraint failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ConstraintPrimaryKey">
            <summary>
            A PRIMARY KEY constraint failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ConstraintTrigger">
            <summary>
            The RAISE function was used by a trigger-program.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ConstraintUnique">
            <summary>
            A UNIQUE constraint failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ConstraintVtab">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.ConstraintRowId">
            <summary>
            A ROWID constraint failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.NoticeRecoverWal">
            <summary>
            Frames were recovered from the WAL log file.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.NoticeRecoverRollback">
            <summary>
            Pages were recovered from the journal file.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.WarningAutoIndex">
            <summary>
            An automatic index was created to process a query.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.AuthUser">
            <summary>
            User authentication failed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteReturnCode.OkLoadPermanently">
            <summary>
            Success.  Prevents the extension from unloading until the process
            terminates.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.Dispose">
            <summary>
            Disposes the prepared statement
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.Step">
            <summary>
            Executes a prepared statement and steps through its results.  For queries that can
            return multiple rows, this method is called once per row before getting column data
            through calls to Get*Value().
            </summary>
            <returns>True if there are additional rows, false if this was the last row or if the
            executed statement had no return value</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.ExecuteNonQuery">
            <summary>
            Executes a non-query SQL statement that does not return any results
            </summary>
            <returns>True if the statement executed successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.TryExecuteNonQuery">
            <summary>
            Try to execute a non-query SQL statement that does not return any results.  This is the same
            as ExecuteNonQuery, except that this method does not throw if execution failed.
            </summary>
            <returns>True if the statement executed successfully</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.Bind(System.Int32,System.String)">
            <summary>
            Binds a value to a parameter declared in the prepared statement's SQL string.
            Bind methods are used to pass in parameters to the statement before it's executed.
            </summary>
            <param name="columnIndex">The 1-based (not zero-based) index of the parameter
            whose value is being bound</param>
            <param name="value">The value to bind to the specified parameter</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.Bind(System.Int32,System.Int64)">
            <summary>
            Binds a value to a parameter declared in the prepared statement's SQL string.
            Bind methods are used to pass in parameters to the statement before it's executed.
            </summary>
            <param name="columnIndex">The 1-based (not zero-based) index of the parameter
            whose value is being bound</param>
            <param name="value">The value to bind to the specified parameter</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.Bind(System.Int32,System.Int32)">
            <summary>
            Binds a value to a parameter declared in the prepared statement's SQL string.
            Bind methods are used to pass in parameters to the statement before it's executed.
            </summary>
            <param name="columnIndex">The 1-based (not zero-based) index of the parameter
            whose value is being bound</param>
            <param name="value">The value to bind to the specified parameter</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.Bind(System.Int32,System.Byte[])">
            <summary>
            Binds a value to a parameter declared in the prepared statement's SQL string.
            Bind methods are used to pass in parameters to the statement before it's executed.
            </summary>
            <param name="columnIndex">The 1-based (not zero-based) index of the parameter
            whose value is being bound</param>
            <param name="value">The value to bind to the specified parameter</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.Bind(System.Int32,System.Single)">
            <summary>
            Binds a value to a parameter declared in the prepared statement's SQL string.
            Bind methods are used to pass in parameters to the statement before it's executed.
            </summary>
            <param name="columnIndex">The 1-based (not zero-based) index of the parameter
            whose value is being bound</param>
            <param name="value">The value to bind to the specified parameter</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.Bind(System.Int32,System.Double)">
            <summary>
            Binds a value to a parameter declared in the prepared statement's SQL string.
            Bind methods are used to pass in parameters to the statement before it's executed.
            </summary>
            <param name="columnIndex">The 1-based (not zero-based) index of the parameter
            whose value is being bound</param>
            <param name="value">The value to bind to the specified parameter</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.BindNull(System.Int32)">
            <summary>
            Binds a value to a parameter declared in the prepared statement's SQL string.
            Bind methods are used to pass in parameters to the statement before it's executed.
            </summary>
            <param name="columnIndex">The 1-based (not zero-based) index of the parameter
            whose value is being bound</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.BindValue(System.Int32,System.Object)">
            <summary>
            Binds a value to a parameter declared in the prepared statement's SQL string.
            Bind methods are used to pass in parameters to the statement before it's executed.
            </summary>
            <param name="columnIndex">The 1-based (not zero-based) index of the parameter
            whose value is being bound</param>
            <param name="value">The value to bind to the specified parameter</param>
            <exception cref="T:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteException">Thrown if the value is of an unknown type or
            if the sqlite3 bind api returns an error code</exception>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.BindValues(System.Object[])">
            <summary>
            Binds values to parameters declared in the prepared statement's SQL string.
            Bind methods are used to pass in parameters to the statement before it's executed.
            </summary>
            <param name="values">The values to pass in as parameters</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.ClearBindings">
            <summary>
            Resets all values set in Bind or BindValues calls
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.Reset">
            <summary>
            Resets a prepared statement back to the state it was in prior to being executed.
            This method does not reset any bindings, so call ClearBindings separately
            to clear any bound values.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.TryReset">
            <summary>
            Tries to reset a prepared statement back to the state it was in prior to being executed.
            This method differs from <see cref="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.Reset"/> in that an error is logged rather than
            exception thrown if this call fails.  This method does not reset any bindings, so call
            ClearBindings separately to clear any bound values.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.GetColumnType(System.Int32)">
            <summary>
            Gets the data type code for a given column in a result set
            </summary>
            <param name="columnIndex">The column's index</param>
            <returns>The column's data type code</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.GetIntValue(System.Int32)">
            <summary>
            Returns the specified column's value in the current row in the result set
            </summary>
            <param name="columnIndex">The column's index</param>
            <returns>The value at the specified column in the current row</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.GetInt64Value(System.Int32)">
            <summary>
            Returns the specified column's value in the current row in the result set
            </summary>
            <param name="columnIndex">The column's index</param>
            <returns>The value at the specified column in the current row</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.GetBoolValue(System.Int32)">
            <summary>
            Returns the specified column's value in the current row in the result set
            </summary>
            <param name="columnIndex">The column's index</param>
            <returns>The value at the specified column in the current row</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.GetDoubleValue(System.Int32)">
            <summary>
            Returns the specified column's value in the current row in the result set
            </summary>
            <param name="columnIndex">The column's index</param>
            <returns>The value at the specified column in the current row</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.GetTextValue(System.Int32)">
            <summary>
            Returns the specified column's value in the current row in the result set
            </summary>
            <param name="columnIndex">The column's index</param>
            <returns>The value at the specified column in the current row</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Storage.SQLite.SQLiteStatement.GetBlobValue(System.Int32)">
            <summary>
            Returns the specified column's value in the current row in the result set
            </summary>
            <param name="columnIndex">The column's index</param>
            <returns>The value at the specified column in the current row</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.TileDataStore">
            <summary>
            A dictionary of all the map features in a single map tile.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Internal.TileDataStore.IsEmpty">
            <summary>
            True if the parent MapTile doesn't contain any features
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.TileDataStore.AddFeature``1(``0)">
            <summary>
            Called internally to add a feature to a MapTile while it's being decoded.
            </summary>
            <param name="feature">The feature to add</param>
            <typeparam name="T">The feature's type</typeparam>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.TileDataStore.GetFeaturesOfType``1(Niantic.Lightship.Maps.Proto.LayerKind)">
            <summary>
            Returns all of this tile's <see cref="T:Niantic.Lightship.Maps.Features.IMapTileFeature"/>s of
            a given type in the specified layer.  NOTE: This method does
            a small amount of memory allocation when it's called. Please
            consider using <see cref="M:Niantic.Lightship.Maps.Internal.TileDataStore.GetFeatures(Niantic.Lightship.Maps.Proto.LayerKind)"/> instead.
            </summary>
            <param name="layer">The layer containing features to return</param>
            <typeparam name="T">The concrete feature type to return</typeparam>
            <returns>An IEnumerable of features of the specified type</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.TileDataStore.GetFeaturesOfType``1(Niantic.Lightship.Maps.Proto.LayerKind,Niantic.Lightship.Maps.Proto.FeatureKind)">
            <summary>
            Returns all of this tile's <see cref="T:Niantic.Lightship.Maps.Features.IMapTileFeature"/>s of
            a given type and <see cref="T:Niantic.Lightship.Maps.Proto.FeatureKind"/> in the specified
            layer.  NOTE: This method does a small amount of memory
            allocation when it's called. Please consider using
            <see cref="M:Niantic.Lightship.Maps.Internal.TileDataStore.GetFeatures(Niantic.Lightship.Maps.Proto.LayerKind,Niantic.Lightship.Maps.Proto.FeatureKind)"/> instead.
            </summary>
            <param name="layer">The later containing features to return</param>
            <param name="featureKind">The feature kind to return</param>
            <typeparam name="T">The concrete feature type to return</typeparam>
            <returns>An IEnumerable of features of the specified type</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.TileDataStore.GetFeatures(Niantic.Lightship.Maps.Proto.LayerKind)">
            <summary>
            Returns all of this tile's <see cref="T:Niantic.Lightship.Maps.Features.IMapTileFeature"/>s in the specified layer.
            </summary>
            <param name="layer">The later containing features to return</param>
            <returns>A List of features in the specified layer</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.TileDataStore.GetFeatures(Niantic.Lightship.Maps.Proto.LayerKind,Niantic.Lightship.Maps.Proto.FeatureKind)">
            <summary>
            Returns all of this tile's <see cref="T:Niantic.Lightship.Maps.Features.IMapTileFeature"/>s of
            a given <see cref="T:Niantic.Lightship.Maps.Proto.FeatureKind"/> in the specified layer.
            </summary>
            <param name="layer">The later containing features to return</param>
            <param name="featureKind">The feature kind to return</param>
            <returns>A List of features of a given kind in the specified layer</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Utilities.ByteSwapper">
            <summary>
            A helper class that performs byte swapping to convert values from big-endian to little-endian
            and vice versa.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.ByteSwapper.Swap(System.UInt16)">
            <summary>
            Byte swap an unsigned 16 bit integer
            </summary>
            <param name="value">The value to byte swap</param>
            <returns>The byte swapped value</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.ByteSwapper.Swap(System.UInt32)">
            <summary>
            Byte swap an unsigned 32 bit integer
            </summary>
            <param name="value">The value to byte swap</param>
            <returns>The byte swapped value</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.ByteSwapper.Swap(System.UInt64)">
            <summary>
            Byte swap an unsigned 64 bit integer
            </summary>
            <param name="value">The value to byte swap</param>
            <returns>The byte swapped value</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.ByteSwapper.Swap(System.Int16)">
            <summary>
            Byte swap a signed 16 bit integer
            </summary>
            <param name="value">The value to byte swap</param>
            <returns>The byte swapped value</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.ByteSwapper.Swap(System.Int32)">
            <summary>
            Byte swap a signed 32 bit integer
            </summary>
            <param name="value">The value to byte swap</param>
            <returns>The byte swapped value</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.ByteSwapper.Swap(System.Int64)">
            <summary>
            Byte swap a signed 64 bit integer
            </summary>
            <param name="value">The value to byte swap</param>
            <returns>The byte swapped value</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Utilities.DisposableScope">
            <summary>
            A simple utility class that represents a scope, with an action
            performed when it closes.  This can be useful for state that is
            changed within a scope of code and needs to be restored afterwards.
            </summary>
            <example>
            <code>
            bool _value = false;
            bool oldValue = _value;
            using (new DisposableScope(() => _value = oldValue)) {
              _value = true;
              DoSomethingWith(_value);
            }
            </code>
            </example>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.MapUtils.WrapLongitudeDegrees(System.Double)">
            <summary>
            Wraps a longitude (in degrees) if it's outside of the
            range defined by <see cref="F:Niantic.Lightship.Maps.Coordinates.LatLng.MIN_LONGITUDE_DEGREES"/>
            and <see cref="F:Niantic.Lightship.Maps.Coordinates.LatLng.MAX_LONGITUDE_DEGREES"/>.
            </summary>
            <param name="longitudeDegrees">The longitude to wrap</param>
            <returns>A longitude wrapped around the globe such that
            it fits within the valid range of longitudes.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.MapUtils.WrapLongitudeDegrees(System.Double,System.Double,System.Double)">
            <summary>
            Wraps a longitude (in degrees) if it's outside of the
            range defined by <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="longitudeDegrees">The longitude to wrap</param>
            <param name="min">The minimum longitude</param>
            <param name="max">The maximum longitude</param>
            <returns>A longitude wrapped around the globe such that
            it fits within the valid range of longitudes.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.MapUtils.WrapLongitudeCoord(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps a longitude (in tile coordinates) if it's outside of the
            range defined by <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="longitude">The longitude to wrap</param>
            <param name="min">The minimum longitude</param>
            <param name="max">The maximum longitude</param>
            <returns>A longitude wrapped around the globe such that
            it fits within the valid range of longitudes.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.MapUtils.WrapLongitudeCoord(System.Double,System.Double,System.Double)">
            <summary>
            Wraps a longitude (in tile coordinates) if it's outside of the
            range defined by <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="longitude">The longitude to wrap</param>
            <param name="min">The minimum longitude</param>
            <param name="max">The maximum longitude</param>
            <returns>A longitude wrapped around the globe such that
            it fits within the valid range of longitudes.</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.MapUtils.ClampLatitude(System.Double,System.Double,System.Double)">
            <summary>
            Clamps a latitude to <paramref name="min"/> if it's less than the minimum
            value, or to <paramref name="max"/> if it's greater than the maximum value.
            </summary>
            <param name="latitude">The latitude to clamp</param>
            <param name="min">The minimum latitude</param>
            <param name="max">The maximum latitude</param>
            <returns>A latitude clamped to within the min and max</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.MapUtils.ClampLatitude(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a latitude to <paramref name="min"/> if it's less than the minimum
            value, or to <paramref name="max"/> if it's greater than the maximum value.
            </summary>
            <param name="latitude">The latitude to clamp</param>
            <param name="min">The minimum latitude</param>
            <param name="max">The maximum latitude</param>
            <returns>A latitude clamped to within the min and max</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.MapUtils.CheckZoomLevel(System.Int32)">
            <summary>
            Checks whether a zoom level is within a valid range
            </summary>
            <param name="zoomLevel">The zoom level to check</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.MapUtils.AssertZoomLevelIsValid(System.Int32)">
            <summary>
            Asserts that a zoom level is within a valid range
            </summary>
            <param name="zoomLevel">The zoom level to check</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.MapUtils.CheckLatitude(System.Double,System.Double,System.Double)">
            <summary>
            Checks whether a latitude is within a valid min and max range
            </summary>
            <param name="latitude">The latitude to check</param>
            <param name="min">The minimum valid latitude</param>
            <param name="max">The maximum valid latitude</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.MapUtils.CheckLongitude(System.Double)">
            <summary>
            Checks whether a longitude is within a valid range
            </summary>
            <param name="longitude">The longitude to check</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.MapUtils.CheckLongitude(System.Double,System.Double,System.Double)">
            <summary>
            Checks whether a longitude is within a valid min and max range
            </summary>
            <param name="longitude">The longitude to check</param>
            <param name="min">The minimum valid longitude</param>
            <param name="max">The maximum valid longitude</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.MapUtils.ToPlatformCoordinateSystem(System.Double,System.Double,System.Double)">
            <summary>
            Permutes the coordinates of a 3D vector to conform to a left-hand rule from a right-hand
            rule convention.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.MapUtils.ToPlatformCoordinateSystem(System.Single,System.Single,System.Single)">
            <summary>
            Permutes the coordinates of a 3D vector to conform to a left-hand rule from a right-hand
            rule convention.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Utilities.RingTileCoord">
            <summary>
            This type is used to define a single tile in a series of concentric rings from a map's
            center position outward.  The type contains X and Y coordinates as offsets relative to
            the ring's center at (0,0), and the distance from the center of the ring in tile units.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Utilities.RingTileCoord.X">
            <summary>
            Relative tile coordinate from the center of the ring.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Utilities.RingTileCoord.Y">
            <summary>
            Relative tile coordinate from the center of the ring.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Internal.Utilities.RingTileCoord.D">
            <summary>
            Distance in tile coordinates to the center of the ring.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.RingTileCoord.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="d">Distance from the origin</param>
        </member>
        <member name="T:Niantic.Lightship.Maps.Internal.Utilities.RingTileGenerator">
            <summary>
            A utility class for generating <see cref="T:Niantic.Lightship.Maps.Internal.Utilities.RingTileCoord"/>
            tile offset coordinates.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.RingTileGenerator.GenerateRingTiles">
            <summary>
            Generates a series of concentric rings of <see cref="T:Niantic.Lightship.Maps.Internal.Utilities.RingTileCoord"/>
            offsets, up to a maximum number of tile offset values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.RingTileGenerator.GenerateNeighborRing(System.Int32,System.Collections.Generic.List{Niantic.Lightship.Maps.Internal.Utilities.RingTileCoord})">
            <summary>
            Generates a single ring of offsets at a given radius from the center
            </summary>
            <param name="radius">The radius of the ring to generate</param>
            <param name="ring">The list of offsets this ring will be added to</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Internal.Utilities.StringUtils.FormatPrintf(System.String,System.Object[])">
            <summary>
            Formats a string using a C-style printf format. Note that this method
            only supports a subset of possible printf format specifiers and isn't
            meant to be a complete replacement for string.Format().
            </summary>
            <param name="formatString">Format string</param>
            <param name="args">Values to use when replacing
            parameters in the format string</param>
            <returns>A formatted string</returns>
            <exception cref="T:System.FormatException">Thrown when the format
            string contains an unrecognized format specifier</exception>
            <exception cref="T:System.ArgumentException">Throw when the number of arguments
            does not match the number of parameters in the format string</exception>
        </member>
        <member name="T:Niantic.Lightship.Maps.ITileStreamService">
             <summary>
             <c>ITileStreamService</c> provides an API to manage the streaming of
             map tiles.
            
             <para>
             Map tiles consist in collections of map tile features such as areas, buildings,
             lines, points.
             </para>
             <para>
             Clients should attach event listeners to the MapTileDataReady and MapTileDeleted events to get
             the latest data.
            
             To configure which map tiles are loaded, use the IMapManager interface.
            
             It's recommended to use this interface in conjunction with a work queue so
             your game can render map tiles across multiple frames, avoiding a hiccup
             when all the tiles come in.
             </para>
             </summary>
        </member>
        <member name="E:Niantic.Lightship.Maps.ITileStreamService.MapTileDataReady">
             <summary>
             Invoked when a map tile is ready.
            
             The expected pattern is that callers add the map tile to a queue so the
             rendering can be distributed across multiple frames.
             </summary>
        </member>
        <member name="E:Niantic.Lightship.Maps.ITileStreamService.MapTileDeleted">
             <summary>
             Invoked when a map tile is deleted because it's no longer visible.
            
             The game should destroy the game objects associated with the tile.
             </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.ITileStreamService.ActiveTiles">
            <summary>
            Returns all active map tiles.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.ITileStreamServiceInternal">
            <summary>
            This interface is used internally by the Maps library, and is intended to only
            be used for custom implementations of <see cref="T:Niantic.Lightship.Maps.ITileStreamService"/> that are
            passed in to the library in <see cref="M:Niantic.Lightship.Maps.LightshipMapsSystem.Initialize(System.String,System.String,System.String,System.String,System.Version,Niantic.Lightship.Maps.ITileStreamServiceImpl,Niantic.Lightship.Maps.IMapViewManager)"/>.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.ITileStreamServiceInternal.AddReadyTile(Niantic.Lightship.Maps.IMapTile)">
            <summary>
            Invoked when a map tile has been constructed and is ready to be used by the client.
            </summary>
            <param name="mapTile">The constructed map tile.</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.ITileStreamServiceInternal.DeleteTile(System.UInt64)">
            <summary>
            Invoked when a map tile has been deleted.
            </summary>
            <param name="tileId">The ID of the tile to delete.</param>
        </member>
        <member name="T:Niantic.Lightship.Maps.ITileStreamServiceImpl">
            <summary>
            This interface is intended to be used for custom implementations of
            <see cref="T:Niantic.Lightship.Maps.ITileStreamService"/> that are passed in to the library
            in <see cref="M:Niantic.Lightship.Maps.LightshipMapsSystem.Initialize(System.String,System.String,System.String,System.String,System.Version,Niantic.Lightship.Maps.ITileStreamServiceImpl,Niantic.Lightship.Maps.IMapViewManager)"/>.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.ILightshipMapsSystem">
            <summary>
            The MapTileEventHandler is responsible for handling map tile events coming from the plugin.
            This class is a static instance that wrap the calls to the native map api and translates the
            map tile events into actionable callbacks.  It communicates directly with the MapTileManager
            that is responsible for dispatching the events to builders.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.ILightshipMapsSystem.TileStreamService">
            <summary>
            The <see cref="T:Niantic.Lightship.Maps.ITileStreamService"/> to use for notifications
            sent to clients when the set of active maptiles changes.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.ILightshipMapsSystem.MapViewManager">
            <summary>
            The <see cref="T:Niantic.Lightship.Maps.IMapViewManager"/> that the client will use to set and manage views.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.ILightshipMapsSystem.Shutdown">
            <summary>
            Shuts the map tile system down.  This should be called once at
            shutdown to release all resources and join any running threads.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.ILightshipMapsSystem.ProcessEvents">
            <summary>
            Update the map tile system. This should be called periodically.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.LightshipMapsSystem.IsIdle">
            <summary>
            Is the MapContext idle (finished processing)?
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.LightshipMapsSystem.TileStreamService">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.LightshipMapsSystem.MapViewManager">
            <inheritdoc />
        </member>
        <member name="P:Niantic.Lightship.Maps.LightshipMapsSystem.Instance">
            <summary>
            An instance of the <see cref="T:Niantic.Lightship.Maps.ILightshipMapsSystem"/> singleton.
            NOTE: The <see cref="M:Niantic.Lightship.Maps.LightshipMapsSystem.Initialize(System.String,System.String,System.String,System.String,System.Version,Niantic.Lightship.Maps.ITileStreamServiceImpl,Niantic.Lightship.Maps.IMapViewManager)"/> method needs to be called first.
            </summary>
            <exception cref="T:Niantic.Lightship.Maps.Exceptions.LightshipMapsSystemNotInitializedException">Thrown if this
            property is accessed before calling <see cref="M:Niantic.Lightship.Maps.LightshipMapsSystem.Initialize(System.String,System.String,System.String,System.String,System.Version,Niantic.Lightship.Maps.ITileStreamServiceImpl,Niantic.Lightship.Maps.IMapViewManager)"/></exception>
        </member>
        <member name="M:Niantic.Lightship.Maps.LightshipMapsSystem.Initialize(System.String,System.String,System.String,System.String,System.Version,Niantic.Lightship.Maps.ITileStreamServiceImpl,Niantic.Lightship.Maps.IMapViewManager)">
            <summary>
            Initializes the map tile system.  This should be called once at startup.
            </summary>
            <param name="dataDirectory">A local directory where cached map tile data will be stored.</param>
            <param name="lightshipApiKey">An API key associated with this project's Lightship account.</param>
            <param name="gameName">The name of this game or app, which should match its maptile URL.
            For projects that haven't been assigned a static maptile URL yet, omit this parameter to
            use the default.</param>
            <param name="labelLanguage">An optional ISO 639-1 language code specifying which language
            will be returned from label strings, if available.</param>
            <param name="clientVersion">An optional semantic versioning style build number with major,
            minor, and patch versions (eg 1.2.3)</param>
            <param name="tileStreamService">An optional implementation of <see cref="T:Niantic.Lightship.Maps.ITileStreamService"/></param>
            <param name="mapViewManager">An optional implementation of <see cref="T:Niantic.Lightship.Maps.IMapViewManager"/></param>
        </member>
        <member name="M:Niantic.Lightship.Maps.LightshipMapsSystem.InitializeInternal(System.String,System.String,System.String,System.String,System.Version,Niantic.Lightship.Maps.Network.INetworkHandler,Niantic.Lightship.Maps.Internal.Settings.ISettingsService,Niantic.Lightship.Maps.ITileStreamServiceImpl,Niantic.Lightship.Maps.IMapViewManager)">
            <summary>
            An internal version of the <see cref="M:Niantic.Lightship.Maps.LightshipMapsSystem.Initialize(System.String,System.String,System.String,System.String,System.Version,Niantic.Lightship.Maps.ITileStreamServiceImpl,Niantic.Lightship.Maps.IMapViewManager)"/>
            method, which is used in unit and integration test code.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.LightshipMapsSystem.Shutdown">
            <inheritdoc />
        </member>
        <member name="M:Niantic.Lightship.Maps.LightshipMapsSystem.ProcessEvents">
            <inheritdoc />
        </member>
        <member name="T:Niantic.Lightship.Maps.Logging.ChannelLogger">
            <summary>
            Helper class that simplifies message logging for a specific log channel
            using the logging system in the Platform Debugging library.  All messages
            logged with an instance of this class will be tagged with the channel name
            and given a unique color in the Unity Editor's console, which makes it
            easier to find log messages from a particular feature or system.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Logging.ChannelLogger.ChannelName">
            <summary>
            The name of the channel associated with events logged from this class
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Logging.ChannelLogger.MaxLogLevel">
            <summary>
            The max log level for this channel.  Anything more verbose
            than this level will be suppressed.  This can be used to
            suppress log messages if they're too verbose or to enable
            additional log messages while a system is being debugged.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Logging.ChannelLogger.#ctor(System.String,Niantic.Platform.Debugging.LogLevel)">
            <summary>
            Constructor
            </summary>
            <param name="logChannel">The channel name associated
            with log messages from instances of this class</param>
            <param name="maxLogLevel">The max log level for this channel</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Logging.ChannelLogger.Fatal(System.String)">
            <summary>
            Log a <see cref="F:Niantic.Platform.Debugging.LogLevel.Fatal"/> message to the log channel
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Logging.ChannelLogger.Error(System.String)">
            <summary>
            Log an <see cref="F:Niantic.Platform.Debugging.LogLevel.Error"/> message to the log channel
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Logging.ChannelLogger.Warning(System.String)">
            <summary>
            Log a <see cref="F:Niantic.Platform.Debugging.LogLevel.Warning"/> message to the log channel
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Logging.ChannelLogger.Info(System.String)">
            <summary>
            Log an <see cref="F:Niantic.Platform.Debugging.LogLevel.Info"/> message to the log channel
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Logging.ChannelLogger.Verbose(System.String)">
            <summary>
            Log a <see cref="F:Niantic.Platform.Debugging.LogLevel.Verbose"/> message to the log channel
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Logging.ChannelLogger.LogTrace(System.String)">
            <summary>
            Log a <see cref="F:Niantic.Platform.Debugging.LogLevel.Trace"/> message to the log channel
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Logging.ChannelLogger.LogMessage(Niantic.Platform.Debugging.LogLevel,System.String)">
            <summary>
            Log a message to the log channel
            </summary>
            <param name="logLevel">The message's severity</param>
            <param name="message">The message to log</param>
        </member>
        <member name="T:Niantic.Lightship.Maps.Logging.ErrorState">
            <summary>
            An enum representing various error states or conditions
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Logging.ErrorState.AssertionFailed">
            <summary>
            An assertion in <see cref="T:Niantic.Lightship.Maps.Logging.MgAssert"/> failed
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Logging.ErrorState.CheckFailed">
            <summary>
            A check in <see cref="T:Niantic.Lightship.Maps.Logging.MgCheck"/> failed
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Logging.ErrorState.WarningLogged">
            <summary>
            A warning message was logged
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Logging.ErrorState.ErrorLogged">
            <summary>
            An error message was logged
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Logging.ErrorState.FatalLogged">
            <summary>
            A fatal message was logged
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Logging.ErrorState.None">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Logging.ErrorState.All">
            <summary>
            All error states
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Logging.MgDebug">
            <summary>
            A utility class used for debugging
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Logging.MgDebug.BreakOn">
            <summary>
            If any error conditions set in this property occur, a
            breakpoint will be triggered if the debugger is attached.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Network.INetworkHandler.RequestAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Request/Response API (responses are paired with requests via RequestId)
             Sends async request to the network. When done, callback is called.
            
             If the network doesn't accept requests at this time, kInvalidNetRequestId
             is returned.
            
             The caller is responsible for checking that the request id is valid and for
             taking appropriate steps to deal with the situation.
            
             This method may be called from any thread
             </summary>
             <param name="url"></param>
             <param name="cancellationToken">A cancellation token that can be used to cancel this request
             </param>
             <returns></returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Network.NetworkResponse">
            <summary>
            Implementation of the request response.  It's common to all platforms.
            Contains the response code as well as response headers if required.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Network.NetworkResponse.ExceptionStatus">
            <summary>
            If an exception was thrown by a network request,
            this property contains its status code.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Network.NetworkResponse.ResponseBytes">
            <summary>
            The raw data downloaded by the network request
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Network.NetworkResponse.Status">
            <summary>
            An http status code representing the request's outcome
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Network.NetworkResponse.IsHttpSuccess">
            <summary>
            True if the network request succeeded
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Network.NetworkResponse.WasCanceled">
            <summary>
            True if the network request was canceled
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Network.NetworkResponse.#ctor(System.Byte[],Niantic.Lightship.Maps.Network.StatusCode,System.Net.WebExceptionStatus)">
            <summary>
            Constructor
            </summary>
            <param name="data">The raw data downloaded from this request</param>
            <param name="status">An http status code</param>
            <param name="exception">A status code if an exception was thrown</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.Network.NetworkResponse.FromSuccess(System.Byte[])">
            <summary>
            Creates a <see cref="T:Niantic.Lightship.Maps.Network.NetworkResponse"/> for a request that succeeded.
            </summary>
            <param name="responseData">The raw data downloaded from this request</param>
            <returns>A successful <see cref="T:Niantic.Lightship.Maps.Network.NetworkResponse"/></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Network.NetworkResponse.FromCancellation">
            <summary>
            Creates a <see cref="T:Niantic.Lightship.Maps.Network.NetworkResponse"/> for a request that was canceled.
            </summary>
            <returns>A canceled <see cref="T:Niantic.Lightship.Maps.Network.NetworkResponse"/></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Network.NetworkResponse.FromFailure(Niantic.Lightship.Maps.Network.StatusCode,System.Net.WebExceptionStatus)">
            <summary>
            Creates a <see cref="T:Niantic.Lightship.Maps.Network.NetworkResponse"/> for a request that failed.
            </summary>
            <param name="status">An http status code</param>
            <param name="exception">A status code if an exception was thrown</param>
            <returns>A failed <see cref="T:Niantic.Lightship.Maps.Network.NetworkResponse"/></returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Network.StatusCodeExtensions">
            <summary>
            Extension methods for <see cref="T:Niantic.Lightship.Maps.Network.StatusCode"/>
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Network.StatusCodeExtensions.IsHttpSuccess(Niantic.Lightship.Maps.Network.StatusCode)">
            <summary>
            Determines whether a <see cref="T:Niantic.Lightship.Maps.Network.StatusCode"/> was successful
            </summary>
            <param name="statusCode">The status code to check</param>
            <returns>True if the http request was successful</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Network.StatusCodeExtensions.WasCanceled(Niantic.Lightship.Maps.Network.StatusCode)">
            <summary>
            Determines whether a <see cref="T:Niantic.Lightship.Maps.Network.StatusCode"/> was canceled
            </summary>
            <param name="statusCode">The status code to check</param>
            <returns>True if the http request was canceled</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Network.StatusCode">
            <summary>
            List of possible response codes resulting from
            a network request.  This includes standard HTTP
            codes as well as other networking failures.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Network.UnityNetworkHandler">
            <summary>
            Downloads data from a URL using Unity's <see cref="T:UnityEngine.Networking.UnityWebRequest"/>.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Network.UnityNetworkHandler.RequestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously downloads data from a given URL.  This
            method can be called from any thread.  When the caller
            is not on the main thread, this method will first switch
            to the main thread in order to call into Unity's APIs.
            </summary>
            <param name="url">The http URL to request</param>
            <param name="cancellationToken">Used to cancel the request</param>
            <returns>A <see cref="T:Niantic.Lightship.Maps.Network.NetworkResponse"/>
            containing the result of the network call</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.MapCompositionRootReflection">
            <summary>Holder for reflection information generated from map_composition_root.proto</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapCompositionRootReflection.Descriptor">
            <summary>File descriptor for map_composition_root.proto</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapCompositionRoot.MapAreaFieldNumber">
            <summary>Field number for the "map_area" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapCompositionRoot.MapArea">
            <summary>
             Z ordered list of map areas.  If a desired tile overlaps multiple areas, only the
             tile from the latest area in the list should be displayed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapCompositionRoot.MapProviderFieldNumber">
            <summary>Field number for the "map_provider" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapCompositionRoot.MapProvider">
            <summary>
             Ordered list of available map providers
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.MapArea">
            <summary>
             Describes the map area.
             It’s a region of the world described as a collection of
             bounding boxes that may or may not overlap each other.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapArea.DescriptionFieldNumber">
            <summary>Field number for the "description" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapArea.Description">
            <summary>
             Description for that particular area
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapArea.EpochFieldNumber">
            <summary>Field number for the "epoch" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapArea.Epoch">
            <summary>
             Epoch for the map tiles in the area
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapArea.MapProviderFieldNumber">
            <summary>Field number for the "map_provider" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapArea.MapProvider">
            <summary>
             Contains the map tile provider information.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapArea.BoundingRectFieldNumber">
            <summary>Field number for the "bounding_rect" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapArea.BoundingRect">
            <summary>
             Map areas controlled by the provider
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapArea.BlockedLabelNameFieldNumber">
            <summary>Field number for the "blocked_label_name" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapArea.BlockedLabelName">
            <summary>
             Blocked label names within this area that should not be displayed.
             Upon picking the localized name for a label, if it equals any name in this list, the
             label should instead not be displayed.
             Note this is localization-specific- if a different localization of such a label is picked,
             and that localization's name does not appear in this list, the label can be displayed.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapArea.MinimumClientVersionFieldNumber">
            <summary>Field number for the "minimum_client_version" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapArea.MinimumClientVersion">
            <summary>
             Minimum version of the SDK required to use this MapArea.
             Maptile clients with an older (in particular, lexicographically earlier) client version
             must ignore this MapArea.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapArea.TileEncryptionKeyFieldNumber">
            <summary>Field number for the "tile_encryption_key" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapArea.TileEncryptionKey">
            <summary>
             Tile encryption key to use within this map area.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.MapProvider">
            <summary>
             Describes the map provider
             It contains the basic information there is to know about
             a particular provider.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapProvider.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapProvider.Name">
            <summary>
             Provider name
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapProvider.BaseUrlFieldNumber">
            <summary>Field number for the "base_url" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapProvider.BaseUrl">
            <summary>
             base url for the map tile query
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapProvider.QueryFormatFieldNumber">
            <summary>Field number for the "query_format" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapProvider.QueryFormat">
            <summary>
             query format.  This a printf-style string that should be provided two arguments:
             the epoch, and the hashed/obfuscated bundle name.
             A full tile url should be constructed similarly to:
                 base_url + String.format(query_format, epoch, hashedBundleName)
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapProvider.MapTypeFieldNumber">
            <summary>Field number for the "map_type" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapProvider.MapType">
            <summary>
             The type of map, used to determine how the query should be performed
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapProvider.MinTileLevelFieldNumber">
            <summary>Field number for the "min_tile_level" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapProvider.MinTileLevel">
            <summary>
             Minimum tile level this provider can request.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapProvider.MaxTileLevelFieldNumber">
            <summary>Field number for the "max_tile_level" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MapProvider.MaxTileLevel">
            <summary>
             Maximum tile level this provider can request.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.MapProvider.Types">
            <summary>Container for nested types declared in the MapProvider message type.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapProvider.Types.MapType.BLANK">
            <summary>
             A map provider that only provides empty tiles (no data at all).
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapProvider.Types.MapType.NIANTIC_BUNDLE">
            <summary>
             16-tile bundles in Niantic Maptile Format v2+.
             For getting a tile at a zoom within the min/max zoom, we would instead request the bundle
             for its parent at zoom max(0, tile zoom - 2).
             eg for tile 10,100,200, we would request bundle 8,25,50 (w/tile zoom 10).
             eg for tile 17,500,600, we would request bundle 15,125,150 (w/tile zoom 17).
             eg for tile 1,0,1 we would request bundle 0,0,0 (w/tile zoom 1).
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.BoundingRect">
            <summary>
             Describes the geographic bounding area.
             It’s a rectangular area expressed in Plate Carree projection.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.BoundingRect.NorthFieldNumber">
            <summary>Field number for the "north" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.BoundingRect.North">
            <summary>
             North edge in decimal degrees
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.BoundingRect.SouthFieldNumber">
            <summary>Field number for the "south" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.BoundingRect.South">
            <summary>
             South edge in decimal degrees
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.BoundingRect.EastFieldNumber">
            <summary>Field number for the "east" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.BoundingRect.East">
            <summary>
             East edge in decimal degrees
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.BoundingRect.WestFieldNumber">
            <summary>Field number for the "west" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.BoundingRect.West">
            <summary>
             West edge in decimal degrees
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.MaptilesApiReflection">
            <summary>Holder for reflection information generated from maptiles_api.proto</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.MaptilesApiReflection.Descriptor">
            <summary>File descriptor for maptiles_api.proto</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.GetMaptilesSettingsRequest.UnitySdkVersionFieldNumber">
            <summary>Field number for the "unity_sdk_version" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.GetMaptilesSettingsRequest.EighthWallModuleVersionFieldNumber">
            <summary>Field number for the "eighth_wall_module_version" field.</summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.GetMaptilesSettingsRequest.ClientVersionOneofCase">
            <summary>Enum of possible cases for the "client_version" oneof.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.GetMaptilesSettingsResponse.MapCompositionRootFieldNumber">
            <summary>Field number for the "map_composition_root" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.GetMaptilesSettingsResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.GetMaptilesSettingsResponse.ErrorMessageFieldNumber">
            <summary>Field number for the "error_message" field.</summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.GetMaptilesSettingsResponse.Types">
            <summary>Container for nested types declared in the GetMaptilesSettingsResponse message type.</summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.TileReflection">
            <summary>Holder for reflection information generated from tile.proto</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.TileReflection.Descriptor">
            <summary>File descriptor for tile.proto</summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.LayerKind">
            <summary>
             All of the available layers in our maptiles.
             See spreadsheet here for more detail on layers/feature kinds:
             https://docs.google.com/spreadsheets/d/1uWKhfu3dtLo-prWIiXMaZjcqkqRuphX_Qqj9JhDWToQ/edit#gid=0
             TODO(szelinka): replace with link to feature catalog when available.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.LayerKind.LAYER_BOUNDARIES">
            <summary>
             Lines: COUNTRY, REGION, OTHER
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.LayerKind.LAYER_BUILDINGS">
            <summary>
             Polygons and labels: AGRICULTURAL, COMMERCIAL, EDUCATION, GOVERNMENT,
                 HEALTHCARE, HOTEL, INDUSTRIAL, LANDMARK, OTHER, RELIGIOUS,
                 RESIDENTIAL, RETAIL, SCHOOL, SERVICES, SPORTS, TRANSPORTION, UNUSED
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.LayerKind.LAYER_LANDUSE">
            <summary>
             Polygons and labels: AIRPORT, BASIN, CEMETERY, FARM, FARMLAND, FOREST,
                 GARDEN, GLACIER, GOLF_COURSE, GRASS, MEADOW, MILITARY, NATIONAL_PARK,
                 NATURE_RESERVE, PARK, PARKING, PRISON, PROTECTED_AREA, QUARRY,
                 RECREATION_AREA, ROCK, RUNWAY, SAND, SCRUB, TAXIWAY, WETLAND, WOOD
             Labels:  PEAK, VALLEY
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.LayerKind.LAYER_PLACES">
            <summary>
             Labels: BOROUGH, CITY, COUNTRY, HAMLET, NEIGHBORHOOD, REGION, TOWN,
                 VILLAGE.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.LayerKind.LAYER_ROADS">
            <summary>
             Lines: HIGHWAY, MAJOR_ROAD, MINOR_ROAD, PARKING, PATH, PEDESTRIAN,
                 RAILWAY, RUNWAY, TAXIWAY
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.LayerKind.LAYER_TRANSIT">
            <summary>
             Polygons and labels: PLATFORM, STATION
             Lines: LIGHT_RAIL, RAILWAY, SUBWAY
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.LayerKind.LAYER_WATER">
            <summary>
             Polygons and labels: REEF, WATER
             Lines: CANAL, DITCH, DRAIN, RIVER, STREAM
             Labels: BASIN, BAY, FJORD, LAKE, OCEAN, PLAYA, RIVERBANK, SEA, STRAIT.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.FeatureKind">
            <summary>
             All of the different feature kinds available in our maptiles.
             Next value: 101
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.TiledBlob">
            <summary>
             An encoded blob of tiled data that has been compressed and encrypted
             according to the requirements/standards of the supplied format
             version.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.TiledBlob.FormatVersionFieldNumber">
            <summary>Field number for the "format_version" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.TiledBlob.FormatVersion">
             <summary>
              Niantic maptile version starts at '2'.  This should increase whenever
              the format changes in such a way that a decoder would misinterpret
              any of the data in the maptile (such that results would be unusable).
              (generally, if an existing client in the wild can continue using
              maptiles successfully, the version need not change).
            
              Examples of changes that should increment version:
                - changing encryption or compression algorithm.
                - replacing geometry encoding for some important class of features.
            
              Examples of changes that should NOT increment version:
                - adding new optional metadata to features.
                - adding per-vertex or per-face attributes.
                - adding new layers or feature kinds.
                - adding a new geometry encoding used only for new features.
             </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.TiledBlob.ZoomFieldNumber">
            <summary>Field number for the "zoom" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.TiledBlob.XFieldNumber">
            <summary>Field number for the "x" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.TiledBlob.YFieldNumber">
            <summary>Field number for the "y" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.TiledBlob.EpochFieldNumber">
            <summary>Field number for the "epoch" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.TiledBlob.EncodedDataFieldNumber">
            <summary>Field number for the "encoded_data" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.TiledBlob.EncodedData">
            <summary>
             In format_version == 2, this is a MapTileBundle that has been
             compressed with gzip and then encrypted with our usual encryption.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.MapTileBundle">
            <summary>
             A collection of individual maptiles.  Typically a bundle is a
             4x4 group of tiles that are all children of a common parent tile
             (2 zooms coarser).  The specific bundle parameters are provided to
             games in the MapCompositionRoot.  Tiles are in row-major order.
             Generally, tile bundles are intended to reduce the number of files
             in our storage bucket, to reduce per-file storage costs.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapTileBundle.FormatVersionFieldNumber">
            <summary>Field number for the "format_version" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapTileBundle.TileZoomFieldNumber">
            <summary>Field number for the "tile_zoom" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapTileBundle.BundleZoomFieldNumber">
            <summary>Field number for the "bundle_zoom" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapTileBundle.BundleXFieldNumber">
            <summary>Field number for the "bundle_x" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapTileBundle.BundleYFieldNumber">
            <summary>Field number for the "bundle_y" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapTileBundle.EpochFieldNumber">
            <summary>Field number for the "epoch" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapTileBundle.TilesFieldNumber">
            <summary>Field number for the "tiles" field.</summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.MapTile">
            <summary>
             The main interior content proto for an individual map tile.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapTile.ZoomFieldNumber">
            <summary>Field number for the "zoom" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapTile.XFieldNumber">
            <summary>Field number for the "x" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapTile.YFieldNumber">
            <summary>Field number for the "y" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.MapTile.LayersFieldNumber">
            <summary>Field number for the "layers" field.</summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.Layer">
            <summary>
             Maptile content is organized into layers, as enumerated by LayerKind.
             Each layer is just a collection of features.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Layer.LayerKindFieldNumber">
            <summary>Field number for the "layer_kind" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Layer.FeaturesFieldNumber">
            <summary>Field number for the "features" field.</summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.Feature">
            <summary>
             A maptile feature.  Generally, this represents some unique geographic
             feature on earth, such as a building, a country, a road, a body of
             water, etc.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Feature.FeatureKindFieldNumber">
            <summary>Field number for the "feature_kind" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Feature.GeometryFieldNumber">
            <summary>Field number for the "geometry" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Feature.LabelFieldNumber">
            <summary>Field number for the "label" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Feature.BuildingMetadataFieldNumber">
            <summary>Field number for the "building_metadata" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.Feature.BuildingMetadata">
            <summary>
             Each building layer feature may have a building_metadata.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Feature.RoadMetadataFieldNumber">
            <summary>Field number for the "road_metadata" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.Feature.RoadMetadata">
            <summary>
             Each road layer feature may have a road_metadata.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Feature.TransitMetadataFieldNumber">
            <summary>Field number for the "transit_metadata" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.Feature.TransitMetadata">
            <summary>
             Each transit layer feature may have a transit_metadata.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.Feature.MetadataOneofCase">
            <summary>Enum of possible cases for the "metadata" oneof.</summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.BuildingMetadata">
            <summary>
             Feature metadata specific to features in the buildings layer.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.BuildingMetadata.HeightMetersFieldNumber">
            <summary>Field number for the "height_meters" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.BuildingMetadata.IsUndergroundFieldNumber">
            <summary>Field number for the "is_underground" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.BuildingMetadata.IsUnderground">
            <summary>
             true if building is known to be underground (ex: underground train station)
             false if not underground, or only partially underground, or unknown
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.RoadMetadata">
            <summary>
             Feature metadata specific to features in the roads layer.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.RoadMetadata.IsTunnelFieldNumber">
            <summary>Field number for the "is_tunnel" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.RoadMetadata.IsTunnel">
            <summary>
             True if this feature is in a tunnel.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.RoadMetadata.RailwayIsSidingFieldNumber">
            <summary>Field number for the "railway_is_siding" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.RoadMetadata.RailwayIsSiding">
            <summary>
             True on KIND_RAILWAY features that are 'siding' tracks.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.RoadMetadata.NetworkFieldNumber">
            <summary>Field number for the "network" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.RoadMetadata.Network">
             <summary>
              Route information for road features.  Generally, these will only
              be on highway, major_road, and minor_road feature kinds, and there
              may be both name (eg James Lick Freeway) and route info (US-101).
              The route info will be either:
            
              - a network + shield text.  The network is intended to identify a
                hierarchy level within the road network.  eg interstate vs state
                highway vs county road.  This is typically a string of the form
                '&lt;country>:&lt;stuff>" where country is a 2-letter country code,
                and stuff is additional hierarchy information which varies from
                country to country.  See here for a list of the most prominent:
                https://tilezen.readthedocs.io/en/latest/layers/#roads-layer-network-values
                (note: we may eventually turn this into an enum.  But there are
                upwards of 1k networks in actual use..).
            
                Typically each road network has its own standard design for how
                route signs look, and map iconography is chosen to mimic that.
                So the network is really intended to be used to pick a shield
                icon/graphic.  The shield text should be rendered within it to
                identify the particular route.  eg for a segment of I-90, the
                network would be "US:I", and the shield_text would be "90".  Note
                that European shield text may be non-numeric  (eg "m1" in UK).
            
              - a route.  This is a fallback when network + shield text is not
                available. It includes the route name (network + number) as a
                single entity, eg "I 90".  (but in most cases it will be complex
                route info that isn't easily parsed into network + shield text).
             </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.RoadMetadata.ShieldTextFieldNumber">
            <summary>Field number for the "shield_text" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.RoadMetadata.RouteFieldNumber">
            <summary>Field number for the "route" field.</summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.TransitMetadata">
            <summary>
             Feature metadata specific to features in the transit layer.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.TransitMetadata.RouteFieldNumber">
            <summary>Field number for the "route" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.TransitMetadata.Route">
            <summary>
             The route number(s) for this transit feature.  Note this may not
             be easily parseable into actual numbers.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.TransitMetadata.AgencyFieldNumber">
            <summary>Field number for the "agency" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.TransitMetadata.Agency">
            <summary>
             The transit agency/network to which this feature belongs.
             eg SF Muni, Santa Clara VTA, etc.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.TransitMetadata.ColorNameFieldNumber">
            <summary>Field number for the "color_name" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.TransitMetadata.ColorName">
            <summary>
             Color for this transit feature (standard CSS web color name).
             This is a 'closest' CSS color for the standard color that is
             used to identify this transit line (in signage for it, etc).
             The intent is to use this to index an actual color map, whose
             colors are consistent with a game's UX design (eg, typically
             containing more muted colors that don't overwhelm the visuals).
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.Geometry">
            <summary>
             Contains all of the geometry for a feature.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Geometry.PointsFieldNumber">
            <summary>Field number for the "points" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Geometry.PolylinesFieldNumber">
            <summary>Field number for the "polylines" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Geometry.TrianglesFieldNumber">
            <summary>Field number for the "triangles" field.</summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.Geometry.GeometryOneofCase">
            <summary>Enum of possible cases for the "geometry" oneof.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.PointList.CoordsFieldNumber">
            <summary>Field number for the "coords" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.PointList.Coords">
            <summary>
             Vertex coordinates in order, v0 v1 v2 ...
             Each vertex x/y is packed into one 32-bit field with x
             in the lower 16 bits and y in the higher 16 bits.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Polyline.CoordsFieldNumber">
            <summary>Field number for the "coords" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.Polyline.Coords">
            <summary>
             Vertex coordinates in order, v0 v1 v2 ...
             Each vertex x/y is packed into one 32-bit field with x
             in the lower 16 bits and y in the higher 16 bits.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.PolylineList.PolylinesFieldNumber">
            <summary>Field number for the "polylines" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.TriangleList.CoordsFieldNumber">
            <summary>Field number for the "coords" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.TriangleList.Coords">
            <summary>
             3-tuple of vertex coordinates per triangle:
               (v0 v1 v2) (v0 v1 v2) (v0 v1 v2) ...
             Each vertex x/y is packed into one 32-bit field with x
             in the lower 16 bits and y in the higher 16 bits.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.TriangleList.ExteriorEdgesFieldNumber">
            <summary>Field number for the "exterior_edges" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.TriangleList.ExteriorEdges">
             <summary>
              Bitfields of exterior edge flags.  When this triangle list is in
              fact a triangulation of some polygon, an edge's flag is set
              when that edge corresponds to an edge of the original polygon.
              (this allows such edges to be stroked separately, eg, especially
              if the original polygon spans multiple tiles).
            
              Each byte has 2 triangle’s edge bits as follows:
                0 v2v0 v1v2 v0v1 0 v2v0 v1v2 v0v1
              Triangles and their vertices are in the same order as in 'coords'
              above, and the lower 4 bits are for the earlier triangle.
             </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.TriangleList.Types">
            <summary>Container for nested types declared in the TriangleList message type.</summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.Label">
            <summary>
             All of the information for a particular label.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Label.MinZoomFieldNumber">
            <summary>Field number for the "min_zoom" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.Label.MinZoom">
            <summary>
             Min/max zooms at which the label should be displayed.
             Labels with lower min_zoom should be prioritized over labels with
             higher min_zoom, so long as the current zoom is &lt;= their max_zoom.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Label.MaxZoomFieldNumber">
            <summary>Field number for the "max_zoom" field.</summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Label.PriorityFieldNumber">
            <summary>Field number for the "priority" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.Label.Priority">
            <summary>
             Relative priority for this label, compared to other labels with the
             same min_zoom.  (eg, in deciding which to display, if multiple labels
             overlap, sort by min_zoom (lowest first) then by priority
             (highest first).
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.Label.LocalizationsFieldNumber">
            <summary>Field number for the "localizations" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.Label.Localizations">
            <summary>
             All of the translations of the label content which we have available.
             These are sorted in language order, and the 'local' translation (with
             empty language) is guaranteed to exist and be first.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Proto.LabelContentLocalization">
            <summary>
             Content of a label that has been localized for a particular language.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.LabelContentLocalization.LanguageFieldNumber">
            <summary>Field number for the "language" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.LabelContentLocalization.Language">
            <summary>
             The ISO 639-1 language code to which the content has been localized
             in this instance.  If empty, this is the 'local' translation of the
             label content, that people geographically local to the feature use.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.Proto.LabelContentLocalization.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.Proto.LabelContentLocalization.Name">
            <summary>
             The name of the underlying geographic feature.
            </summary>
        </member>
        <member name="T:Niantic.Lightship.Maps.Utilities.MathEx">
            <summary>
            Utility class for mathematical functions
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.DegToRad(System.Double)">
            <summary>
            Converts between degrees and radians
            </summary>
            <param name="deg"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.RadToDeg(System.Double)">
            <summary>
            Converts between radians and degrees
            </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the first number within the input range.
            </summary>
            <param name="var"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the first number within the input range.
            </summary>
            <param name="var"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.WrapInclusive(System.Double,System.Double,System.Double)">
            <summary>
            Wraps a value to within [min, max] (inclusive of max).
            </summary>
            <param name="value">The value to wrap</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>A value wrapped to within [min, max]</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.WrapInclusive(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps a value to within [min, max] (inclusive of max).
            </summary>
            <param name="value">The value to wrap</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>A value wrapped to within [min, max]</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.WrapExclusive(System.Double,System.Double,System.Double)">
            <summary>
            Wraps a value to within [min, max) (not inclusive of max).
            </summary>
            <param name="value">The value to wrap</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>A value wrapped to within [min, max)</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.WrapExclusive(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps a value to within [min, max) (not inclusive of max).
            </summary>
            <param name="value">The value to wrap</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>A value wrapped to within [min, max)</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.IsBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks whether a value is within a given range of [min, max] (inclusive of min and max).
            </summary>
            <param name="value">The value to check</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>True if the value is in [min, max]</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.IsBetween(System.Single,System.Single,System.Single)">
            <summary>
            Checks whether a value is within a given range of [min, max] (inclusive of min and max).
            </summary>
            <param name="value">The value to check</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>True if the value is in [min, max]</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.IsBetween(System.Double,System.Double,System.Double)">
            <summary>
            Checks whether a value is within a given range of [min, max] (inclusive of min and max).
            </summary>
            <param name="value">The value to check</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>True if the value is in [min, max]</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.IsBetweenMaxExclusive(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks whether a value is within a given range of [min, max) (not inclusive of max).
            </summary>
            <param name="value">The value to check</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>True if the value is in [min, max)</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.IsBetweenMaxExclusive(System.Single,System.Single,System.Single)">
            <summary>
            Checks whether a value is within a given range of [min, max) (not inclusive of max).
            </summary>
            <param name="value">The value to check</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>True if the value is in [min, max)</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.IsBetweenMaxExclusive(System.Double,System.Double,System.Double)">
            <summary>
            Checks whether a value is within a given range of [min, max) (not inclusive of max).
            </summary>
            <param name="value">The value to check</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>True if the value is in [min, max)</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.AlmostEqual(System.Single,System.Single,System.Single)">
            <summary>
            Checks whether two floating-point values are almost
            equal, to within a certain degree of tolerance.
            </summary>
            <param name="value1">The first value to check</param>
            <param name="value2">The second value to check</param>
            <param name="tolerance">The amount of tolerance between
            the two values to be considered equal.</param>
            <returns>True if the two values are close enough to be considered equal</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.Utilities.MathEx.AlmostEqual(System.Double,System.Double,System.Double)">
            <summary>
            Checks whether two floating-point values are almost
            equal, to within a certain degree of tolerance.
            </summary>
            <param name="value1">The first value to check</param>
            <param name="value2">The second value to check</param>
            <param name="tolerance">The amount of tolerance between
            the two values to be considered equal.</param>
            <returns>True if the two values are close enough to be considered equal</returns>
        </member>
        <member name="T:Niantic.Lightship.Maps.ViewPoint">
            <summary>
            <c>ViewPoint</c> describes viewpoint parameters to configure the map.
            The viewpoint consists of a location somewhere in the world along with
            a desired radius of interest for map data.  These parameters are used
            to determine the map ROI and then determine the tile resolution needed
            for the map rendering.  Each tile resolution is database specific, but
            their representation on screen is up to the user.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.ViewPoint.LongitudeDeg">
            <summary>
            Longitude of the viewpoint's center, in degrees.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.ViewPoint.LatitudeDeg">
            <summary>
            Latitude of the viewpoint's center, in degrees.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.ViewPoint.Center">
            <summary>
            The center of the viewable map area, in latitude and longitude coordinates.
            </summary>
        </member>
        <member name="F:Niantic.Lightship.Maps.ViewPoint.MapAreaRadiusM">
            <summary>
            Desired viewpoint map area radius, in meters.
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.ViewPoint.Invalid">
            <summary>
            Returns an invalid <see cref="T:Niantic.Lightship.Maps.ViewPoint"/>
            </summary>
        </member>
        <member name="P:Niantic.Lightship.Maps.ViewPoint.IsValid">
            <summary>
            Returns true if the <see cref="T:Niantic.Lightship.Maps.ViewPoint"/>'s latitude and longitude
            are a valid geographic location and the map radius is non-negative.
            </summary>
        </member>
        <member name="M:Niantic.Lightship.Maps.ViewPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="longitudeDeg">Longitude of the viewpoint's center, in degrees.</param>
            <param name="latitudeDeg">Latitude of the viewpoint's center, in degrees.</param>
            <param name="mapAreaRadiusM">Desired viewpoint map area radius, in meters.</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.ViewPoint.#ctor(Niantic.Lightship.Maps.Coordinates.LatLng@,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="latLng">The latitude and longitude of the viewpoint's center.</param>
            <param name="mapAreaRadiusM">Desired viewpoint map area radius in meters.</param>
        </member>
        <member name="M:Niantic.Lightship.Maps.ViewPoint.WithNewLatLng(Niantic.Lightship.Maps.Coordinates.LatLng@)">
            <summary>
            Constructs a <see cref="T:Niantic.Lightship.Maps.ViewPoint"/> with a new <see cref="T:Niantic.Lightship.Maps.Coordinates.LatLng"/> and
            the same <see cref="F:Niantic.Lightship.Maps.ViewPoint.MapAreaRadiusM"/>
            </summary>
            <param name="latLng">The new viewpoint center</param>
            <returns>A new ViewPoint</returns>
        </member>
        <member name="M:Niantic.Lightship.Maps.ViewPoint.WithNewMapRadius(System.Double)">
            <summary>
            Constructs a <see cref="T:Niantic.Lightship.Maps.ViewPoint"/> with a new <see cref="F:Niantic.Lightship.Maps.ViewPoint.MapAreaRadiusM"/>
            and the same <see cref="T:Niantic.Lightship.Maps.Coordinates.LatLng"/>
            </summary>
            <param name="mapRadius">Desired viewpoint map area radius in meters</param>
            <returns>A new ViewPoint</returns>
        </member>
    </members>
</doc>
